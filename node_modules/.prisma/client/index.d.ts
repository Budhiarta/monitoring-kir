
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Device
 * 
 */
export type Device = $Result.DefaultSelection<Prisma.$DevicePayload>
/**
 * Model Monitoring
 * 
 */
export type Monitoring = $Result.DefaultSelection<Prisma.$MonitoringPayload>
/**
 * Model CheckedTask
 * 
 */
export type CheckedTask = $Result.DefaultSelection<Prisma.$CheckedTaskPayload>
/**
 * Model Task
 * 
 */
export type Task = $Result.DefaultSelection<Prisma.$TaskPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.device`: Exposes CRUD operations for the **Device** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Devices
    * const devices = await prisma.device.findMany()
    * ```
    */
  get device(): Prisma.DeviceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.monitoring`: Exposes CRUD operations for the **Monitoring** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Monitorings
    * const monitorings = await prisma.monitoring.findMany()
    * ```
    */
  get monitoring(): Prisma.MonitoringDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.checkedTask`: Exposes CRUD operations for the **CheckedTask** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CheckedTasks
    * const checkedTasks = await prisma.checkedTask.findMany()
    * ```
    */
  get checkedTask(): Prisma.CheckedTaskDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.task`: Exposes CRUD operations for the **Task** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tasks
    * const tasks = await prisma.task.findMany()
    * ```
    */
  get task(): Prisma.TaskDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.5.0
   * Query Engine version: 173f8d54f8d52e692c7e27e72a88314ec7aeff60
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Device: 'Device',
    Monitoring: 'Monitoring',
    CheckedTask: 'CheckedTask',
    Task: 'Task'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "device" | "monitoring" | "checkedTask" | "task"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Device: {
        payload: Prisma.$DevicePayload<ExtArgs>
        fields: Prisma.DeviceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DeviceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DevicePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DeviceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DevicePayload>
          }
          findFirst: {
            args: Prisma.DeviceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DevicePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DeviceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DevicePayload>
          }
          findMany: {
            args: Prisma.DeviceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DevicePayload>[]
          }
          create: {
            args: Prisma.DeviceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DevicePayload>
          }
          createMany: {
            args: Prisma.DeviceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DeviceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DevicePayload>[]
          }
          delete: {
            args: Prisma.DeviceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DevicePayload>
          }
          update: {
            args: Prisma.DeviceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DevicePayload>
          }
          deleteMany: {
            args: Prisma.DeviceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DeviceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DeviceUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DevicePayload>[]
          }
          upsert: {
            args: Prisma.DeviceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DevicePayload>
          }
          aggregate: {
            args: Prisma.DeviceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDevice>
          }
          groupBy: {
            args: Prisma.DeviceGroupByArgs<ExtArgs>
            result: $Utils.Optional<DeviceGroupByOutputType>[]
          }
          count: {
            args: Prisma.DeviceCountArgs<ExtArgs>
            result: $Utils.Optional<DeviceCountAggregateOutputType> | number
          }
        }
      }
      Monitoring: {
        payload: Prisma.$MonitoringPayload<ExtArgs>
        fields: Prisma.MonitoringFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MonitoringFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MonitoringPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MonitoringFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MonitoringPayload>
          }
          findFirst: {
            args: Prisma.MonitoringFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MonitoringPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MonitoringFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MonitoringPayload>
          }
          findMany: {
            args: Prisma.MonitoringFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MonitoringPayload>[]
          }
          create: {
            args: Prisma.MonitoringCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MonitoringPayload>
          }
          createMany: {
            args: Prisma.MonitoringCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MonitoringCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MonitoringPayload>[]
          }
          delete: {
            args: Prisma.MonitoringDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MonitoringPayload>
          }
          update: {
            args: Prisma.MonitoringUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MonitoringPayload>
          }
          deleteMany: {
            args: Prisma.MonitoringDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MonitoringUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MonitoringUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MonitoringPayload>[]
          }
          upsert: {
            args: Prisma.MonitoringUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MonitoringPayload>
          }
          aggregate: {
            args: Prisma.MonitoringAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMonitoring>
          }
          groupBy: {
            args: Prisma.MonitoringGroupByArgs<ExtArgs>
            result: $Utils.Optional<MonitoringGroupByOutputType>[]
          }
          count: {
            args: Prisma.MonitoringCountArgs<ExtArgs>
            result: $Utils.Optional<MonitoringCountAggregateOutputType> | number
          }
        }
      }
      CheckedTask: {
        payload: Prisma.$CheckedTaskPayload<ExtArgs>
        fields: Prisma.CheckedTaskFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CheckedTaskFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CheckedTaskPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CheckedTaskFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CheckedTaskPayload>
          }
          findFirst: {
            args: Prisma.CheckedTaskFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CheckedTaskPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CheckedTaskFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CheckedTaskPayload>
          }
          findMany: {
            args: Prisma.CheckedTaskFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CheckedTaskPayload>[]
          }
          create: {
            args: Prisma.CheckedTaskCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CheckedTaskPayload>
          }
          createMany: {
            args: Prisma.CheckedTaskCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CheckedTaskCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CheckedTaskPayload>[]
          }
          delete: {
            args: Prisma.CheckedTaskDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CheckedTaskPayload>
          }
          update: {
            args: Prisma.CheckedTaskUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CheckedTaskPayload>
          }
          deleteMany: {
            args: Prisma.CheckedTaskDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CheckedTaskUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CheckedTaskUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CheckedTaskPayload>[]
          }
          upsert: {
            args: Prisma.CheckedTaskUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CheckedTaskPayload>
          }
          aggregate: {
            args: Prisma.CheckedTaskAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCheckedTask>
          }
          groupBy: {
            args: Prisma.CheckedTaskGroupByArgs<ExtArgs>
            result: $Utils.Optional<CheckedTaskGroupByOutputType>[]
          }
          count: {
            args: Prisma.CheckedTaskCountArgs<ExtArgs>
            result: $Utils.Optional<CheckedTaskCountAggregateOutputType> | number
          }
        }
      }
      Task: {
        payload: Prisma.$TaskPayload<ExtArgs>
        fields: Prisma.TaskFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TaskFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TaskFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          findFirst: {
            args: Prisma.TaskFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TaskFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          findMany: {
            args: Prisma.TaskFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>[]
          }
          create: {
            args: Prisma.TaskCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          createMany: {
            args: Prisma.TaskCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TaskCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>[]
          }
          delete: {
            args: Prisma.TaskDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          update: {
            args: Prisma.TaskUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          deleteMany: {
            args: Prisma.TaskDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TaskUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TaskUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>[]
          }
          upsert: {
            args: Prisma.TaskUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          aggregate: {
            args: Prisma.TaskAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTask>
          }
          groupBy: {
            args: Prisma.TaskGroupByArgs<ExtArgs>
            result: $Utils.Optional<TaskGroupByOutputType>[]
          }
          count: {
            args: Prisma.TaskCountArgs<ExtArgs>
            result: $Utils.Optional<TaskCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    device?: DeviceOmit
    monitoring?: MonitoringOmit
    checkedTask?: CheckedTaskOmit
    task?: TaskOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    monitorings: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    monitorings?: boolean | UserCountOutputTypeCountMonitoringsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMonitoringsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MonitoringWhereInput
  }


  /**
   * Count Type DeviceCountOutputType
   */

  export type DeviceCountOutputType = {
    monitorings: number
    Task: number
  }

  export type DeviceCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    monitorings?: boolean | DeviceCountOutputTypeCountMonitoringsArgs
    Task?: boolean | DeviceCountOutputTypeCountTaskArgs
  }

  // Custom InputTypes
  /**
   * DeviceCountOutputType without action
   */
  export type DeviceCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeviceCountOutputType
     */
    select?: DeviceCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DeviceCountOutputType without action
   */
  export type DeviceCountOutputTypeCountMonitoringsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MonitoringWhereInput
  }

  /**
   * DeviceCountOutputType without action
   */
  export type DeviceCountOutputTypeCountTaskArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TaskWhereInput
  }


  /**
   * Count Type MonitoringCountOutputType
   */

  export type MonitoringCountOutputType = {
    checkedTasks: number
  }

  export type MonitoringCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    checkedTasks?: boolean | MonitoringCountOutputTypeCountCheckedTasksArgs
  }

  // Custom InputTypes
  /**
   * MonitoringCountOutputType without action
   */
  export type MonitoringCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MonitoringCountOutputType
     */
    select?: MonitoringCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MonitoringCountOutputType without action
   */
  export type MonitoringCountOutputTypeCountCheckedTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CheckedTaskWhereInput
  }


  /**
   * Count Type TaskCountOutputType
   */

  export type TaskCountOutputType = {
    checkedTasks: number
  }

  export type TaskCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    checkedTasks?: boolean | TaskCountOutputTypeCountCheckedTasksArgs
  }

  // Custom InputTypes
  /**
   * TaskCountOutputType without action
   */
  export type TaskCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskCountOutputType
     */
    select?: TaskCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TaskCountOutputType without action
   */
  export type TaskCountOutputTypeCountCheckedTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CheckedTaskWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    username: string | null
    email: string | null
    password: string | null
    image: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    username: string | null
    email: string | null
    password: string | null
    image: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    username: number
    email: number
    password: number
    image: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    username?: true
    email?: true
    password?: true
    image?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    username?: true
    email?: true
    password?: true
    image?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    username?: true
    email?: true
    password?: true
    image?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    username: string
    email: string
    password: string
    image: string | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    email?: boolean
    password?: boolean
    image?: boolean
    monitorings?: boolean | User$monitoringsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    email?: boolean
    password?: boolean
    image?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    email?: boolean
    password?: boolean
    image?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    username?: boolean
    email?: boolean
    password?: boolean
    image?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "username" | "email" | "password" | "image", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    monitorings?: boolean | User$monitoringsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      monitorings: Prisma.$MonitoringPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      username: string
      email: string
      password: string
      image: string | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    monitorings<T extends User$monitoringsArgs<ExtArgs> = {}>(args?: Subset<T, User$monitoringsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MonitoringPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly username: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly image: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.monitorings
   */
  export type User$monitoringsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Monitoring
     */
    select?: MonitoringSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Monitoring
     */
    omit?: MonitoringOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MonitoringInclude<ExtArgs> | null
    where?: MonitoringWhereInput
    orderBy?: MonitoringOrderByWithRelationInput | MonitoringOrderByWithRelationInput[]
    cursor?: MonitoringWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MonitoringScalarFieldEnum | MonitoringScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Device
   */

  export type AggregateDevice = {
    _count: DeviceCountAggregateOutputType | null
    _avg: DeviceAvgAggregateOutputType | null
    _sum: DeviceSumAggregateOutputType | null
    _min: DeviceMinAggregateOutputType | null
    _max: DeviceMaxAggregateOutputType | null
  }

  export type DeviceAvgAggregateOutputType = {
    id: number | null
  }

  export type DeviceSumAggregateOutputType = {
    id: number | null
  }

  export type DeviceMinAggregateOutputType = {
    id: number | null
    devicename: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DeviceMaxAggregateOutputType = {
    id: number | null
    devicename: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DeviceCountAggregateOutputType = {
    id: number
    devicename: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type DeviceAvgAggregateInputType = {
    id?: true
  }

  export type DeviceSumAggregateInputType = {
    id?: true
  }

  export type DeviceMinAggregateInputType = {
    id?: true
    devicename?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DeviceMaxAggregateInputType = {
    id?: true
    devicename?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DeviceCountAggregateInputType = {
    id?: true
    devicename?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type DeviceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Device to aggregate.
     */
    where?: DeviceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Devices to fetch.
     */
    orderBy?: DeviceOrderByWithRelationInput | DeviceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DeviceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Devices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Devices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Devices
    **/
    _count?: true | DeviceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DeviceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DeviceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DeviceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DeviceMaxAggregateInputType
  }

  export type GetDeviceAggregateType<T extends DeviceAggregateArgs> = {
        [P in keyof T & keyof AggregateDevice]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDevice[P]>
      : GetScalarType<T[P], AggregateDevice[P]>
  }




  export type DeviceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DeviceWhereInput
    orderBy?: DeviceOrderByWithAggregationInput | DeviceOrderByWithAggregationInput[]
    by: DeviceScalarFieldEnum[] | DeviceScalarFieldEnum
    having?: DeviceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DeviceCountAggregateInputType | true
    _avg?: DeviceAvgAggregateInputType
    _sum?: DeviceSumAggregateInputType
    _min?: DeviceMinAggregateInputType
    _max?: DeviceMaxAggregateInputType
  }

  export type DeviceGroupByOutputType = {
    id: number
    devicename: string
    createdAt: Date
    updatedAt: Date
    _count: DeviceCountAggregateOutputType | null
    _avg: DeviceAvgAggregateOutputType | null
    _sum: DeviceSumAggregateOutputType | null
    _min: DeviceMinAggregateOutputType | null
    _max: DeviceMaxAggregateOutputType | null
  }

  type GetDeviceGroupByPayload<T extends DeviceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DeviceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DeviceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DeviceGroupByOutputType[P]>
            : GetScalarType<T[P], DeviceGroupByOutputType[P]>
        }
      >
    >


  export type DeviceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    devicename?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    monitorings?: boolean | Device$monitoringsArgs<ExtArgs>
    Task?: boolean | Device$TaskArgs<ExtArgs>
    _count?: boolean | DeviceCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["device"]>

  export type DeviceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    devicename?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["device"]>

  export type DeviceSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    devicename?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["device"]>

  export type DeviceSelectScalar = {
    id?: boolean
    devicename?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type DeviceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "devicename" | "createdAt" | "updatedAt", ExtArgs["result"]["device"]>
  export type DeviceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    monitorings?: boolean | Device$monitoringsArgs<ExtArgs>
    Task?: boolean | Device$TaskArgs<ExtArgs>
    _count?: boolean | DeviceCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DeviceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type DeviceIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $DevicePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Device"
    objects: {
      monitorings: Prisma.$MonitoringPayload<ExtArgs>[]
      Task: Prisma.$TaskPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      devicename: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["device"]>
    composites: {}
  }

  type DeviceGetPayload<S extends boolean | null | undefined | DeviceDefaultArgs> = $Result.GetResult<Prisma.$DevicePayload, S>

  type DeviceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DeviceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DeviceCountAggregateInputType | true
    }

  export interface DeviceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Device'], meta: { name: 'Device' } }
    /**
     * Find zero or one Device that matches the filter.
     * @param {DeviceFindUniqueArgs} args - Arguments to find a Device
     * @example
     * // Get one Device
     * const device = await prisma.device.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DeviceFindUniqueArgs>(args: SelectSubset<T, DeviceFindUniqueArgs<ExtArgs>>): Prisma__DeviceClient<$Result.GetResult<Prisma.$DevicePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Device that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DeviceFindUniqueOrThrowArgs} args - Arguments to find a Device
     * @example
     * // Get one Device
     * const device = await prisma.device.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DeviceFindUniqueOrThrowArgs>(args: SelectSubset<T, DeviceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DeviceClient<$Result.GetResult<Prisma.$DevicePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Device that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceFindFirstArgs} args - Arguments to find a Device
     * @example
     * // Get one Device
     * const device = await prisma.device.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DeviceFindFirstArgs>(args?: SelectSubset<T, DeviceFindFirstArgs<ExtArgs>>): Prisma__DeviceClient<$Result.GetResult<Prisma.$DevicePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Device that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceFindFirstOrThrowArgs} args - Arguments to find a Device
     * @example
     * // Get one Device
     * const device = await prisma.device.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DeviceFindFirstOrThrowArgs>(args?: SelectSubset<T, DeviceFindFirstOrThrowArgs<ExtArgs>>): Prisma__DeviceClient<$Result.GetResult<Prisma.$DevicePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Devices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Devices
     * const devices = await prisma.device.findMany()
     * 
     * // Get first 10 Devices
     * const devices = await prisma.device.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const deviceWithIdOnly = await prisma.device.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DeviceFindManyArgs>(args?: SelectSubset<T, DeviceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DevicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Device.
     * @param {DeviceCreateArgs} args - Arguments to create a Device.
     * @example
     * // Create one Device
     * const Device = await prisma.device.create({
     *   data: {
     *     // ... data to create a Device
     *   }
     * })
     * 
     */
    create<T extends DeviceCreateArgs>(args: SelectSubset<T, DeviceCreateArgs<ExtArgs>>): Prisma__DeviceClient<$Result.GetResult<Prisma.$DevicePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Devices.
     * @param {DeviceCreateManyArgs} args - Arguments to create many Devices.
     * @example
     * // Create many Devices
     * const device = await prisma.device.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DeviceCreateManyArgs>(args?: SelectSubset<T, DeviceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Devices and returns the data saved in the database.
     * @param {DeviceCreateManyAndReturnArgs} args - Arguments to create many Devices.
     * @example
     * // Create many Devices
     * const device = await prisma.device.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Devices and only return the `id`
     * const deviceWithIdOnly = await prisma.device.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DeviceCreateManyAndReturnArgs>(args?: SelectSubset<T, DeviceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DevicePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Device.
     * @param {DeviceDeleteArgs} args - Arguments to delete one Device.
     * @example
     * // Delete one Device
     * const Device = await prisma.device.delete({
     *   where: {
     *     // ... filter to delete one Device
     *   }
     * })
     * 
     */
    delete<T extends DeviceDeleteArgs>(args: SelectSubset<T, DeviceDeleteArgs<ExtArgs>>): Prisma__DeviceClient<$Result.GetResult<Prisma.$DevicePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Device.
     * @param {DeviceUpdateArgs} args - Arguments to update one Device.
     * @example
     * // Update one Device
     * const device = await prisma.device.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DeviceUpdateArgs>(args: SelectSubset<T, DeviceUpdateArgs<ExtArgs>>): Prisma__DeviceClient<$Result.GetResult<Prisma.$DevicePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Devices.
     * @param {DeviceDeleteManyArgs} args - Arguments to filter Devices to delete.
     * @example
     * // Delete a few Devices
     * const { count } = await prisma.device.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DeviceDeleteManyArgs>(args?: SelectSubset<T, DeviceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Devices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Devices
     * const device = await prisma.device.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DeviceUpdateManyArgs>(args: SelectSubset<T, DeviceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Devices and returns the data updated in the database.
     * @param {DeviceUpdateManyAndReturnArgs} args - Arguments to update many Devices.
     * @example
     * // Update many Devices
     * const device = await prisma.device.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Devices and only return the `id`
     * const deviceWithIdOnly = await prisma.device.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DeviceUpdateManyAndReturnArgs>(args: SelectSubset<T, DeviceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DevicePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Device.
     * @param {DeviceUpsertArgs} args - Arguments to update or create a Device.
     * @example
     * // Update or create a Device
     * const device = await prisma.device.upsert({
     *   create: {
     *     // ... data to create a Device
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Device we want to update
     *   }
     * })
     */
    upsert<T extends DeviceUpsertArgs>(args: SelectSubset<T, DeviceUpsertArgs<ExtArgs>>): Prisma__DeviceClient<$Result.GetResult<Prisma.$DevicePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Devices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceCountArgs} args - Arguments to filter Devices to count.
     * @example
     * // Count the number of Devices
     * const count = await prisma.device.count({
     *   where: {
     *     // ... the filter for the Devices we want to count
     *   }
     * })
    **/
    count<T extends DeviceCountArgs>(
      args?: Subset<T, DeviceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DeviceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Device.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DeviceAggregateArgs>(args: Subset<T, DeviceAggregateArgs>): Prisma.PrismaPromise<GetDeviceAggregateType<T>>

    /**
     * Group by Device.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DeviceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DeviceGroupByArgs['orderBy'] }
        : { orderBy?: DeviceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DeviceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDeviceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Device model
   */
  readonly fields: DeviceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Device.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DeviceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    monitorings<T extends Device$monitoringsArgs<ExtArgs> = {}>(args?: Subset<T, Device$monitoringsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MonitoringPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Task<T extends Device$TaskArgs<ExtArgs> = {}>(args?: Subset<T, Device$TaskArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Device model
   */ 
  interface DeviceFieldRefs {
    readonly id: FieldRef<"Device", 'Int'>
    readonly devicename: FieldRef<"Device", 'String'>
    readonly createdAt: FieldRef<"Device", 'DateTime'>
    readonly updatedAt: FieldRef<"Device", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Device findUnique
   */
  export type DeviceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Device
     */
    select?: DeviceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Device
     */
    omit?: DeviceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeviceInclude<ExtArgs> | null
    /**
     * Filter, which Device to fetch.
     */
    where: DeviceWhereUniqueInput
  }

  /**
   * Device findUniqueOrThrow
   */
  export type DeviceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Device
     */
    select?: DeviceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Device
     */
    omit?: DeviceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeviceInclude<ExtArgs> | null
    /**
     * Filter, which Device to fetch.
     */
    where: DeviceWhereUniqueInput
  }

  /**
   * Device findFirst
   */
  export type DeviceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Device
     */
    select?: DeviceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Device
     */
    omit?: DeviceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeviceInclude<ExtArgs> | null
    /**
     * Filter, which Device to fetch.
     */
    where?: DeviceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Devices to fetch.
     */
    orderBy?: DeviceOrderByWithRelationInput | DeviceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Devices.
     */
    cursor?: DeviceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Devices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Devices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Devices.
     */
    distinct?: DeviceScalarFieldEnum | DeviceScalarFieldEnum[]
  }

  /**
   * Device findFirstOrThrow
   */
  export type DeviceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Device
     */
    select?: DeviceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Device
     */
    omit?: DeviceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeviceInclude<ExtArgs> | null
    /**
     * Filter, which Device to fetch.
     */
    where?: DeviceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Devices to fetch.
     */
    orderBy?: DeviceOrderByWithRelationInput | DeviceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Devices.
     */
    cursor?: DeviceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Devices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Devices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Devices.
     */
    distinct?: DeviceScalarFieldEnum | DeviceScalarFieldEnum[]
  }

  /**
   * Device findMany
   */
  export type DeviceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Device
     */
    select?: DeviceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Device
     */
    omit?: DeviceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeviceInclude<ExtArgs> | null
    /**
     * Filter, which Devices to fetch.
     */
    where?: DeviceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Devices to fetch.
     */
    orderBy?: DeviceOrderByWithRelationInput | DeviceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Devices.
     */
    cursor?: DeviceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Devices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Devices.
     */
    skip?: number
    distinct?: DeviceScalarFieldEnum | DeviceScalarFieldEnum[]
  }

  /**
   * Device create
   */
  export type DeviceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Device
     */
    select?: DeviceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Device
     */
    omit?: DeviceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeviceInclude<ExtArgs> | null
    /**
     * The data needed to create a Device.
     */
    data: XOR<DeviceCreateInput, DeviceUncheckedCreateInput>
  }

  /**
   * Device createMany
   */
  export type DeviceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Devices.
     */
    data: DeviceCreateManyInput | DeviceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Device createManyAndReturn
   */
  export type DeviceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Device
     */
    select?: DeviceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Device
     */
    omit?: DeviceOmit<ExtArgs> | null
    /**
     * The data used to create many Devices.
     */
    data: DeviceCreateManyInput | DeviceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Device update
   */
  export type DeviceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Device
     */
    select?: DeviceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Device
     */
    omit?: DeviceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeviceInclude<ExtArgs> | null
    /**
     * The data needed to update a Device.
     */
    data: XOR<DeviceUpdateInput, DeviceUncheckedUpdateInput>
    /**
     * Choose, which Device to update.
     */
    where: DeviceWhereUniqueInput
  }

  /**
   * Device updateMany
   */
  export type DeviceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Devices.
     */
    data: XOR<DeviceUpdateManyMutationInput, DeviceUncheckedUpdateManyInput>
    /**
     * Filter which Devices to update
     */
    where?: DeviceWhereInput
    /**
     * Limit how many Devices to update.
     */
    limit?: number
  }

  /**
   * Device updateManyAndReturn
   */
  export type DeviceUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Device
     */
    select?: DeviceSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Device
     */
    omit?: DeviceOmit<ExtArgs> | null
    /**
     * The data used to update Devices.
     */
    data: XOR<DeviceUpdateManyMutationInput, DeviceUncheckedUpdateManyInput>
    /**
     * Filter which Devices to update
     */
    where?: DeviceWhereInput
    /**
     * Limit how many Devices to update.
     */
    limit?: number
  }

  /**
   * Device upsert
   */
  export type DeviceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Device
     */
    select?: DeviceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Device
     */
    omit?: DeviceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeviceInclude<ExtArgs> | null
    /**
     * The filter to search for the Device to update in case it exists.
     */
    where: DeviceWhereUniqueInput
    /**
     * In case the Device found by the `where` argument doesn't exist, create a new Device with this data.
     */
    create: XOR<DeviceCreateInput, DeviceUncheckedCreateInput>
    /**
     * In case the Device was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DeviceUpdateInput, DeviceUncheckedUpdateInput>
  }

  /**
   * Device delete
   */
  export type DeviceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Device
     */
    select?: DeviceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Device
     */
    omit?: DeviceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeviceInclude<ExtArgs> | null
    /**
     * Filter which Device to delete.
     */
    where: DeviceWhereUniqueInput
  }

  /**
   * Device deleteMany
   */
  export type DeviceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Devices to delete
     */
    where?: DeviceWhereInput
    /**
     * Limit how many Devices to delete.
     */
    limit?: number
  }

  /**
   * Device.monitorings
   */
  export type Device$monitoringsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Monitoring
     */
    select?: MonitoringSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Monitoring
     */
    omit?: MonitoringOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MonitoringInclude<ExtArgs> | null
    where?: MonitoringWhereInput
    orderBy?: MonitoringOrderByWithRelationInput | MonitoringOrderByWithRelationInput[]
    cursor?: MonitoringWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MonitoringScalarFieldEnum | MonitoringScalarFieldEnum[]
  }

  /**
   * Device.Task
   */
  export type Device$TaskArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    where?: TaskWhereInput
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    cursor?: TaskWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * Device without action
   */
  export type DeviceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Device
     */
    select?: DeviceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Device
     */
    omit?: DeviceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeviceInclude<ExtArgs> | null
  }


  /**
   * Model Monitoring
   */

  export type AggregateMonitoring = {
    _count: MonitoringCountAggregateOutputType | null
    _avg: MonitoringAvgAggregateOutputType | null
    _sum: MonitoringSumAggregateOutputType | null
    _min: MonitoringMinAggregateOutputType | null
    _max: MonitoringMaxAggregateOutputType | null
  }

  export type MonitoringAvgAggregateOutputType = {
    id: number | null
    MonitoringType: number | null
    deviceId: number | null
  }

  export type MonitoringSumAggregateOutputType = {
    id: number | null
    MonitoringType: number | null
    deviceId: number | null
  }

  export type MonitoringMinAggregateOutputType = {
    id: number | null
    Tester: string | null
    Date: Date | null
    MonitoringType: number | null
    Documentation: string | null
    Status: boolean | null
    Sumary: string | null
    Signature: string | null
    userId: string | null
    deviceId: number | null
  }

  export type MonitoringMaxAggregateOutputType = {
    id: number | null
    Tester: string | null
    Date: Date | null
    MonitoringType: number | null
    Documentation: string | null
    Status: boolean | null
    Sumary: string | null
    Signature: string | null
    userId: string | null
    deviceId: number | null
  }

  export type MonitoringCountAggregateOutputType = {
    id: number
    Tester: number
    Date: number
    MonitoringType: number
    Documentation: number
    Status: number
    Sumary: number
    Signature: number
    userId: number
    deviceId: number
    _all: number
  }


  export type MonitoringAvgAggregateInputType = {
    id?: true
    MonitoringType?: true
    deviceId?: true
  }

  export type MonitoringSumAggregateInputType = {
    id?: true
    MonitoringType?: true
    deviceId?: true
  }

  export type MonitoringMinAggregateInputType = {
    id?: true
    Tester?: true
    Date?: true
    MonitoringType?: true
    Documentation?: true
    Status?: true
    Sumary?: true
    Signature?: true
    userId?: true
    deviceId?: true
  }

  export type MonitoringMaxAggregateInputType = {
    id?: true
    Tester?: true
    Date?: true
    MonitoringType?: true
    Documentation?: true
    Status?: true
    Sumary?: true
    Signature?: true
    userId?: true
    deviceId?: true
  }

  export type MonitoringCountAggregateInputType = {
    id?: true
    Tester?: true
    Date?: true
    MonitoringType?: true
    Documentation?: true
    Status?: true
    Sumary?: true
    Signature?: true
    userId?: true
    deviceId?: true
    _all?: true
  }

  export type MonitoringAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Monitoring to aggregate.
     */
    where?: MonitoringWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Monitorings to fetch.
     */
    orderBy?: MonitoringOrderByWithRelationInput | MonitoringOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MonitoringWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Monitorings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Monitorings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Monitorings
    **/
    _count?: true | MonitoringCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MonitoringAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MonitoringSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MonitoringMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MonitoringMaxAggregateInputType
  }

  export type GetMonitoringAggregateType<T extends MonitoringAggregateArgs> = {
        [P in keyof T & keyof AggregateMonitoring]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMonitoring[P]>
      : GetScalarType<T[P], AggregateMonitoring[P]>
  }




  export type MonitoringGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MonitoringWhereInput
    orderBy?: MonitoringOrderByWithAggregationInput | MonitoringOrderByWithAggregationInput[]
    by: MonitoringScalarFieldEnum[] | MonitoringScalarFieldEnum
    having?: MonitoringScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MonitoringCountAggregateInputType | true
    _avg?: MonitoringAvgAggregateInputType
    _sum?: MonitoringSumAggregateInputType
    _min?: MonitoringMinAggregateInputType
    _max?: MonitoringMaxAggregateInputType
  }

  export type MonitoringGroupByOutputType = {
    id: number
    Tester: string
    Date: Date
    MonitoringType: number
    Documentation: string
    Status: boolean
    Sumary: string
    Signature: string
    userId: string
    deviceId: number
    _count: MonitoringCountAggregateOutputType | null
    _avg: MonitoringAvgAggregateOutputType | null
    _sum: MonitoringSumAggregateOutputType | null
    _min: MonitoringMinAggregateOutputType | null
    _max: MonitoringMaxAggregateOutputType | null
  }

  type GetMonitoringGroupByPayload<T extends MonitoringGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MonitoringGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MonitoringGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MonitoringGroupByOutputType[P]>
            : GetScalarType<T[P], MonitoringGroupByOutputType[P]>
        }
      >
    >


  export type MonitoringSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    Tester?: boolean
    Date?: boolean
    MonitoringType?: boolean
    Documentation?: boolean
    Status?: boolean
    Sumary?: boolean
    Signature?: boolean
    userId?: boolean
    deviceId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    device?: boolean | DeviceDefaultArgs<ExtArgs>
    checkedTasks?: boolean | Monitoring$checkedTasksArgs<ExtArgs>
    _count?: boolean | MonitoringCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["monitoring"]>

  export type MonitoringSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    Tester?: boolean
    Date?: boolean
    MonitoringType?: boolean
    Documentation?: boolean
    Status?: boolean
    Sumary?: boolean
    Signature?: boolean
    userId?: boolean
    deviceId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    device?: boolean | DeviceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["monitoring"]>

  export type MonitoringSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    Tester?: boolean
    Date?: boolean
    MonitoringType?: boolean
    Documentation?: boolean
    Status?: boolean
    Sumary?: boolean
    Signature?: boolean
    userId?: boolean
    deviceId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    device?: boolean | DeviceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["monitoring"]>

  export type MonitoringSelectScalar = {
    id?: boolean
    Tester?: boolean
    Date?: boolean
    MonitoringType?: boolean
    Documentation?: boolean
    Status?: boolean
    Sumary?: boolean
    Signature?: boolean
    userId?: boolean
    deviceId?: boolean
  }

  export type MonitoringOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "Tester" | "Date" | "MonitoringType" | "Documentation" | "Status" | "Sumary" | "Signature" | "userId" | "deviceId", ExtArgs["result"]["monitoring"]>
  export type MonitoringInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    device?: boolean | DeviceDefaultArgs<ExtArgs>
    checkedTasks?: boolean | Monitoring$checkedTasksArgs<ExtArgs>
    _count?: boolean | MonitoringCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MonitoringIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    device?: boolean | DeviceDefaultArgs<ExtArgs>
  }
  export type MonitoringIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    device?: boolean | DeviceDefaultArgs<ExtArgs>
  }

  export type $MonitoringPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Monitoring"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      device: Prisma.$DevicePayload<ExtArgs>
      checkedTasks: Prisma.$CheckedTaskPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      Tester: string
      Date: Date
      MonitoringType: number
      Documentation: string
      Status: boolean
      Sumary: string
      Signature: string
      userId: string
      deviceId: number
    }, ExtArgs["result"]["monitoring"]>
    composites: {}
  }

  type MonitoringGetPayload<S extends boolean | null | undefined | MonitoringDefaultArgs> = $Result.GetResult<Prisma.$MonitoringPayload, S>

  type MonitoringCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MonitoringFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MonitoringCountAggregateInputType | true
    }

  export interface MonitoringDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Monitoring'], meta: { name: 'Monitoring' } }
    /**
     * Find zero or one Monitoring that matches the filter.
     * @param {MonitoringFindUniqueArgs} args - Arguments to find a Monitoring
     * @example
     * // Get one Monitoring
     * const monitoring = await prisma.monitoring.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MonitoringFindUniqueArgs>(args: SelectSubset<T, MonitoringFindUniqueArgs<ExtArgs>>): Prisma__MonitoringClient<$Result.GetResult<Prisma.$MonitoringPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Monitoring that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MonitoringFindUniqueOrThrowArgs} args - Arguments to find a Monitoring
     * @example
     * // Get one Monitoring
     * const monitoring = await prisma.monitoring.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MonitoringFindUniqueOrThrowArgs>(args: SelectSubset<T, MonitoringFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MonitoringClient<$Result.GetResult<Prisma.$MonitoringPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Monitoring that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MonitoringFindFirstArgs} args - Arguments to find a Monitoring
     * @example
     * // Get one Monitoring
     * const monitoring = await prisma.monitoring.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MonitoringFindFirstArgs>(args?: SelectSubset<T, MonitoringFindFirstArgs<ExtArgs>>): Prisma__MonitoringClient<$Result.GetResult<Prisma.$MonitoringPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Monitoring that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MonitoringFindFirstOrThrowArgs} args - Arguments to find a Monitoring
     * @example
     * // Get one Monitoring
     * const monitoring = await prisma.monitoring.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MonitoringFindFirstOrThrowArgs>(args?: SelectSubset<T, MonitoringFindFirstOrThrowArgs<ExtArgs>>): Prisma__MonitoringClient<$Result.GetResult<Prisma.$MonitoringPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Monitorings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MonitoringFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Monitorings
     * const monitorings = await prisma.monitoring.findMany()
     * 
     * // Get first 10 Monitorings
     * const monitorings = await prisma.monitoring.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const monitoringWithIdOnly = await prisma.monitoring.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MonitoringFindManyArgs>(args?: SelectSubset<T, MonitoringFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MonitoringPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Monitoring.
     * @param {MonitoringCreateArgs} args - Arguments to create a Monitoring.
     * @example
     * // Create one Monitoring
     * const Monitoring = await prisma.monitoring.create({
     *   data: {
     *     // ... data to create a Monitoring
     *   }
     * })
     * 
     */
    create<T extends MonitoringCreateArgs>(args: SelectSubset<T, MonitoringCreateArgs<ExtArgs>>): Prisma__MonitoringClient<$Result.GetResult<Prisma.$MonitoringPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Monitorings.
     * @param {MonitoringCreateManyArgs} args - Arguments to create many Monitorings.
     * @example
     * // Create many Monitorings
     * const monitoring = await prisma.monitoring.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MonitoringCreateManyArgs>(args?: SelectSubset<T, MonitoringCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Monitorings and returns the data saved in the database.
     * @param {MonitoringCreateManyAndReturnArgs} args - Arguments to create many Monitorings.
     * @example
     * // Create many Monitorings
     * const monitoring = await prisma.monitoring.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Monitorings and only return the `id`
     * const monitoringWithIdOnly = await prisma.monitoring.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MonitoringCreateManyAndReturnArgs>(args?: SelectSubset<T, MonitoringCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MonitoringPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Monitoring.
     * @param {MonitoringDeleteArgs} args - Arguments to delete one Monitoring.
     * @example
     * // Delete one Monitoring
     * const Monitoring = await prisma.monitoring.delete({
     *   where: {
     *     // ... filter to delete one Monitoring
     *   }
     * })
     * 
     */
    delete<T extends MonitoringDeleteArgs>(args: SelectSubset<T, MonitoringDeleteArgs<ExtArgs>>): Prisma__MonitoringClient<$Result.GetResult<Prisma.$MonitoringPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Monitoring.
     * @param {MonitoringUpdateArgs} args - Arguments to update one Monitoring.
     * @example
     * // Update one Monitoring
     * const monitoring = await prisma.monitoring.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MonitoringUpdateArgs>(args: SelectSubset<T, MonitoringUpdateArgs<ExtArgs>>): Prisma__MonitoringClient<$Result.GetResult<Prisma.$MonitoringPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Monitorings.
     * @param {MonitoringDeleteManyArgs} args - Arguments to filter Monitorings to delete.
     * @example
     * // Delete a few Monitorings
     * const { count } = await prisma.monitoring.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MonitoringDeleteManyArgs>(args?: SelectSubset<T, MonitoringDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Monitorings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MonitoringUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Monitorings
     * const monitoring = await prisma.monitoring.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MonitoringUpdateManyArgs>(args: SelectSubset<T, MonitoringUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Monitorings and returns the data updated in the database.
     * @param {MonitoringUpdateManyAndReturnArgs} args - Arguments to update many Monitorings.
     * @example
     * // Update many Monitorings
     * const monitoring = await prisma.monitoring.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Monitorings and only return the `id`
     * const monitoringWithIdOnly = await prisma.monitoring.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MonitoringUpdateManyAndReturnArgs>(args: SelectSubset<T, MonitoringUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MonitoringPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Monitoring.
     * @param {MonitoringUpsertArgs} args - Arguments to update or create a Monitoring.
     * @example
     * // Update or create a Monitoring
     * const monitoring = await prisma.monitoring.upsert({
     *   create: {
     *     // ... data to create a Monitoring
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Monitoring we want to update
     *   }
     * })
     */
    upsert<T extends MonitoringUpsertArgs>(args: SelectSubset<T, MonitoringUpsertArgs<ExtArgs>>): Prisma__MonitoringClient<$Result.GetResult<Prisma.$MonitoringPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Monitorings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MonitoringCountArgs} args - Arguments to filter Monitorings to count.
     * @example
     * // Count the number of Monitorings
     * const count = await prisma.monitoring.count({
     *   where: {
     *     // ... the filter for the Monitorings we want to count
     *   }
     * })
    **/
    count<T extends MonitoringCountArgs>(
      args?: Subset<T, MonitoringCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MonitoringCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Monitoring.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MonitoringAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MonitoringAggregateArgs>(args: Subset<T, MonitoringAggregateArgs>): Prisma.PrismaPromise<GetMonitoringAggregateType<T>>

    /**
     * Group by Monitoring.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MonitoringGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MonitoringGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MonitoringGroupByArgs['orderBy'] }
        : { orderBy?: MonitoringGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MonitoringGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMonitoringGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Monitoring model
   */
  readonly fields: MonitoringFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Monitoring.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MonitoringClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    device<T extends DeviceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DeviceDefaultArgs<ExtArgs>>): Prisma__DeviceClient<$Result.GetResult<Prisma.$DevicePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    checkedTasks<T extends Monitoring$checkedTasksArgs<ExtArgs> = {}>(args?: Subset<T, Monitoring$checkedTasksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CheckedTaskPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Monitoring model
   */ 
  interface MonitoringFieldRefs {
    readonly id: FieldRef<"Monitoring", 'Int'>
    readonly Tester: FieldRef<"Monitoring", 'String'>
    readonly Date: FieldRef<"Monitoring", 'DateTime'>
    readonly MonitoringType: FieldRef<"Monitoring", 'Int'>
    readonly Documentation: FieldRef<"Monitoring", 'String'>
    readonly Status: FieldRef<"Monitoring", 'Boolean'>
    readonly Sumary: FieldRef<"Monitoring", 'String'>
    readonly Signature: FieldRef<"Monitoring", 'String'>
    readonly userId: FieldRef<"Monitoring", 'String'>
    readonly deviceId: FieldRef<"Monitoring", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Monitoring findUnique
   */
  export type MonitoringFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Monitoring
     */
    select?: MonitoringSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Monitoring
     */
    omit?: MonitoringOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MonitoringInclude<ExtArgs> | null
    /**
     * Filter, which Monitoring to fetch.
     */
    where: MonitoringWhereUniqueInput
  }

  /**
   * Monitoring findUniqueOrThrow
   */
  export type MonitoringFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Monitoring
     */
    select?: MonitoringSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Monitoring
     */
    omit?: MonitoringOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MonitoringInclude<ExtArgs> | null
    /**
     * Filter, which Monitoring to fetch.
     */
    where: MonitoringWhereUniqueInput
  }

  /**
   * Monitoring findFirst
   */
  export type MonitoringFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Monitoring
     */
    select?: MonitoringSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Monitoring
     */
    omit?: MonitoringOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MonitoringInclude<ExtArgs> | null
    /**
     * Filter, which Monitoring to fetch.
     */
    where?: MonitoringWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Monitorings to fetch.
     */
    orderBy?: MonitoringOrderByWithRelationInput | MonitoringOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Monitorings.
     */
    cursor?: MonitoringWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Monitorings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Monitorings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Monitorings.
     */
    distinct?: MonitoringScalarFieldEnum | MonitoringScalarFieldEnum[]
  }

  /**
   * Monitoring findFirstOrThrow
   */
  export type MonitoringFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Monitoring
     */
    select?: MonitoringSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Monitoring
     */
    omit?: MonitoringOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MonitoringInclude<ExtArgs> | null
    /**
     * Filter, which Monitoring to fetch.
     */
    where?: MonitoringWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Monitorings to fetch.
     */
    orderBy?: MonitoringOrderByWithRelationInput | MonitoringOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Monitorings.
     */
    cursor?: MonitoringWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Monitorings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Monitorings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Monitorings.
     */
    distinct?: MonitoringScalarFieldEnum | MonitoringScalarFieldEnum[]
  }

  /**
   * Monitoring findMany
   */
  export type MonitoringFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Monitoring
     */
    select?: MonitoringSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Monitoring
     */
    omit?: MonitoringOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MonitoringInclude<ExtArgs> | null
    /**
     * Filter, which Monitorings to fetch.
     */
    where?: MonitoringWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Monitorings to fetch.
     */
    orderBy?: MonitoringOrderByWithRelationInput | MonitoringOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Monitorings.
     */
    cursor?: MonitoringWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Monitorings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Monitorings.
     */
    skip?: number
    distinct?: MonitoringScalarFieldEnum | MonitoringScalarFieldEnum[]
  }

  /**
   * Monitoring create
   */
  export type MonitoringCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Monitoring
     */
    select?: MonitoringSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Monitoring
     */
    omit?: MonitoringOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MonitoringInclude<ExtArgs> | null
    /**
     * The data needed to create a Monitoring.
     */
    data: XOR<MonitoringCreateInput, MonitoringUncheckedCreateInput>
  }

  /**
   * Monitoring createMany
   */
  export type MonitoringCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Monitorings.
     */
    data: MonitoringCreateManyInput | MonitoringCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Monitoring createManyAndReturn
   */
  export type MonitoringCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Monitoring
     */
    select?: MonitoringSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Monitoring
     */
    omit?: MonitoringOmit<ExtArgs> | null
    /**
     * The data used to create many Monitorings.
     */
    data: MonitoringCreateManyInput | MonitoringCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MonitoringIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Monitoring update
   */
  export type MonitoringUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Monitoring
     */
    select?: MonitoringSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Monitoring
     */
    omit?: MonitoringOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MonitoringInclude<ExtArgs> | null
    /**
     * The data needed to update a Monitoring.
     */
    data: XOR<MonitoringUpdateInput, MonitoringUncheckedUpdateInput>
    /**
     * Choose, which Monitoring to update.
     */
    where: MonitoringWhereUniqueInput
  }

  /**
   * Monitoring updateMany
   */
  export type MonitoringUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Monitorings.
     */
    data: XOR<MonitoringUpdateManyMutationInput, MonitoringUncheckedUpdateManyInput>
    /**
     * Filter which Monitorings to update
     */
    where?: MonitoringWhereInput
    /**
     * Limit how many Monitorings to update.
     */
    limit?: number
  }

  /**
   * Monitoring updateManyAndReturn
   */
  export type MonitoringUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Monitoring
     */
    select?: MonitoringSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Monitoring
     */
    omit?: MonitoringOmit<ExtArgs> | null
    /**
     * The data used to update Monitorings.
     */
    data: XOR<MonitoringUpdateManyMutationInput, MonitoringUncheckedUpdateManyInput>
    /**
     * Filter which Monitorings to update
     */
    where?: MonitoringWhereInput
    /**
     * Limit how many Monitorings to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MonitoringIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Monitoring upsert
   */
  export type MonitoringUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Monitoring
     */
    select?: MonitoringSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Monitoring
     */
    omit?: MonitoringOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MonitoringInclude<ExtArgs> | null
    /**
     * The filter to search for the Monitoring to update in case it exists.
     */
    where: MonitoringWhereUniqueInput
    /**
     * In case the Monitoring found by the `where` argument doesn't exist, create a new Monitoring with this data.
     */
    create: XOR<MonitoringCreateInput, MonitoringUncheckedCreateInput>
    /**
     * In case the Monitoring was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MonitoringUpdateInput, MonitoringUncheckedUpdateInput>
  }

  /**
   * Monitoring delete
   */
  export type MonitoringDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Monitoring
     */
    select?: MonitoringSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Monitoring
     */
    omit?: MonitoringOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MonitoringInclude<ExtArgs> | null
    /**
     * Filter which Monitoring to delete.
     */
    where: MonitoringWhereUniqueInput
  }

  /**
   * Monitoring deleteMany
   */
  export type MonitoringDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Monitorings to delete
     */
    where?: MonitoringWhereInput
    /**
     * Limit how many Monitorings to delete.
     */
    limit?: number
  }

  /**
   * Monitoring.checkedTasks
   */
  export type Monitoring$checkedTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckedTask
     */
    select?: CheckedTaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CheckedTask
     */
    omit?: CheckedTaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheckedTaskInclude<ExtArgs> | null
    where?: CheckedTaskWhereInput
    orderBy?: CheckedTaskOrderByWithRelationInput | CheckedTaskOrderByWithRelationInput[]
    cursor?: CheckedTaskWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CheckedTaskScalarFieldEnum | CheckedTaskScalarFieldEnum[]
  }

  /**
   * Monitoring without action
   */
  export type MonitoringDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Monitoring
     */
    select?: MonitoringSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Monitoring
     */
    omit?: MonitoringOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MonitoringInclude<ExtArgs> | null
  }


  /**
   * Model CheckedTask
   */

  export type AggregateCheckedTask = {
    _count: CheckedTaskCountAggregateOutputType | null
    _avg: CheckedTaskAvgAggregateOutputType | null
    _sum: CheckedTaskSumAggregateOutputType | null
    _min: CheckedTaskMinAggregateOutputType | null
    _max: CheckedTaskMaxAggregateOutputType | null
  }

  export type CheckedTaskAvgAggregateOutputType = {
    id: number | null
    taskId: number | null
    monitoringId: number | null
  }

  export type CheckedTaskSumAggregateOutputType = {
    id: number | null
    taskId: number | null
    monitoringId: number | null
  }

  export type CheckedTaskMinAggregateOutputType = {
    id: number | null
    taskId: number | null
    monitoringId: number | null
    checked: boolean | null
  }

  export type CheckedTaskMaxAggregateOutputType = {
    id: number | null
    taskId: number | null
    monitoringId: number | null
    checked: boolean | null
  }

  export type CheckedTaskCountAggregateOutputType = {
    id: number
    taskId: number
    monitoringId: number
    checked: number
    _all: number
  }


  export type CheckedTaskAvgAggregateInputType = {
    id?: true
    taskId?: true
    monitoringId?: true
  }

  export type CheckedTaskSumAggregateInputType = {
    id?: true
    taskId?: true
    monitoringId?: true
  }

  export type CheckedTaskMinAggregateInputType = {
    id?: true
    taskId?: true
    monitoringId?: true
    checked?: true
  }

  export type CheckedTaskMaxAggregateInputType = {
    id?: true
    taskId?: true
    monitoringId?: true
    checked?: true
  }

  export type CheckedTaskCountAggregateInputType = {
    id?: true
    taskId?: true
    monitoringId?: true
    checked?: true
    _all?: true
  }

  export type CheckedTaskAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CheckedTask to aggregate.
     */
    where?: CheckedTaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CheckedTasks to fetch.
     */
    orderBy?: CheckedTaskOrderByWithRelationInput | CheckedTaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CheckedTaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CheckedTasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CheckedTasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CheckedTasks
    **/
    _count?: true | CheckedTaskCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CheckedTaskAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CheckedTaskSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CheckedTaskMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CheckedTaskMaxAggregateInputType
  }

  export type GetCheckedTaskAggregateType<T extends CheckedTaskAggregateArgs> = {
        [P in keyof T & keyof AggregateCheckedTask]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCheckedTask[P]>
      : GetScalarType<T[P], AggregateCheckedTask[P]>
  }




  export type CheckedTaskGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CheckedTaskWhereInput
    orderBy?: CheckedTaskOrderByWithAggregationInput | CheckedTaskOrderByWithAggregationInput[]
    by: CheckedTaskScalarFieldEnum[] | CheckedTaskScalarFieldEnum
    having?: CheckedTaskScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CheckedTaskCountAggregateInputType | true
    _avg?: CheckedTaskAvgAggregateInputType
    _sum?: CheckedTaskSumAggregateInputType
    _min?: CheckedTaskMinAggregateInputType
    _max?: CheckedTaskMaxAggregateInputType
  }

  export type CheckedTaskGroupByOutputType = {
    id: number
    taskId: number
    monitoringId: number
    checked: boolean
    _count: CheckedTaskCountAggregateOutputType | null
    _avg: CheckedTaskAvgAggregateOutputType | null
    _sum: CheckedTaskSumAggregateOutputType | null
    _min: CheckedTaskMinAggregateOutputType | null
    _max: CheckedTaskMaxAggregateOutputType | null
  }

  type GetCheckedTaskGroupByPayload<T extends CheckedTaskGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CheckedTaskGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CheckedTaskGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CheckedTaskGroupByOutputType[P]>
            : GetScalarType<T[P], CheckedTaskGroupByOutputType[P]>
        }
      >
    >


  export type CheckedTaskSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    taskId?: boolean
    monitoringId?: boolean
    checked?: boolean
    task?: boolean | TaskDefaultArgs<ExtArgs>
    monitoring?: boolean | MonitoringDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["checkedTask"]>

  export type CheckedTaskSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    taskId?: boolean
    monitoringId?: boolean
    checked?: boolean
    task?: boolean | TaskDefaultArgs<ExtArgs>
    monitoring?: boolean | MonitoringDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["checkedTask"]>

  export type CheckedTaskSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    taskId?: boolean
    monitoringId?: boolean
    checked?: boolean
    task?: boolean | TaskDefaultArgs<ExtArgs>
    monitoring?: boolean | MonitoringDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["checkedTask"]>

  export type CheckedTaskSelectScalar = {
    id?: boolean
    taskId?: boolean
    monitoringId?: boolean
    checked?: boolean
  }

  export type CheckedTaskOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "taskId" | "monitoringId" | "checked", ExtArgs["result"]["checkedTask"]>
  export type CheckedTaskInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    task?: boolean | TaskDefaultArgs<ExtArgs>
    monitoring?: boolean | MonitoringDefaultArgs<ExtArgs>
  }
  export type CheckedTaskIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    task?: boolean | TaskDefaultArgs<ExtArgs>
    monitoring?: boolean | MonitoringDefaultArgs<ExtArgs>
  }
  export type CheckedTaskIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    task?: boolean | TaskDefaultArgs<ExtArgs>
    monitoring?: boolean | MonitoringDefaultArgs<ExtArgs>
  }

  export type $CheckedTaskPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CheckedTask"
    objects: {
      task: Prisma.$TaskPayload<ExtArgs>
      monitoring: Prisma.$MonitoringPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      taskId: number
      monitoringId: number
      checked: boolean
    }, ExtArgs["result"]["checkedTask"]>
    composites: {}
  }

  type CheckedTaskGetPayload<S extends boolean | null | undefined | CheckedTaskDefaultArgs> = $Result.GetResult<Prisma.$CheckedTaskPayload, S>

  type CheckedTaskCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CheckedTaskFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CheckedTaskCountAggregateInputType | true
    }

  export interface CheckedTaskDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CheckedTask'], meta: { name: 'CheckedTask' } }
    /**
     * Find zero or one CheckedTask that matches the filter.
     * @param {CheckedTaskFindUniqueArgs} args - Arguments to find a CheckedTask
     * @example
     * // Get one CheckedTask
     * const checkedTask = await prisma.checkedTask.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CheckedTaskFindUniqueArgs>(args: SelectSubset<T, CheckedTaskFindUniqueArgs<ExtArgs>>): Prisma__CheckedTaskClient<$Result.GetResult<Prisma.$CheckedTaskPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CheckedTask that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CheckedTaskFindUniqueOrThrowArgs} args - Arguments to find a CheckedTask
     * @example
     * // Get one CheckedTask
     * const checkedTask = await prisma.checkedTask.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CheckedTaskFindUniqueOrThrowArgs>(args: SelectSubset<T, CheckedTaskFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CheckedTaskClient<$Result.GetResult<Prisma.$CheckedTaskPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CheckedTask that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CheckedTaskFindFirstArgs} args - Arguments to find a CheckedTask
     * @example
     * // Get one CheckedTask
     * const checkedTask = await prisma.checkedTask.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CheckedTaskFindFirstArgs>(args?: SelectSubset<T, CheckedTaskFindFirstArgs<ExtArgs>>): Prisma__CheckedTaskClient<$Result.GetResult<Prisma.$CheckedTaskPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CheckedTask that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CheckedTaskFindFirstOrThrowArgs} args - Arguments to find a CheckedTask
     * @example
     * // Get one CheckedTask
     * const checkedTask = await prisma.checkedTask.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CheckedTaskFindFirstOrThrowArgs>(args?: SelectSubset<T, CheckedTaskFindFirstOrThrowArgs<ExtArgs>>): Prisma__CheckedTaskClient<$Result.GetResult<Prisma.$CheckedTaskPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CheckedTasks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CheckedTaskFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CheckedTasks
     * const checkedTasks = await prisma.checkedTask.findMany()
     * 
     * // Get first 10 CheckedTasks
     * const checkedTasks = await prisma.checkedTask.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const checkedTaskWithIdOnly = await prisma.checkedTask.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CheckedTaskFindManyArgs>(args?: SelectSubset<T, CheckedTaskFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CheckedTaskPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CheckedTask.
     * @param {CheckedTaskCreateArgs} args - Arguments to create a CheckedTask.
     * @example
     * // Create one CheckedTask
     * const CheckedTask = await prisma.checkedTask.create({
     *   data: {
     *     // ... data to create a CheckedTask
     *   }
     * })
     * 
     */
    create<T extends CheckedTaskCreateArgs>(args: SelectSubset<T, CheckedTaskCreateArgs<ExtArgs>>): Prisma__CheckedTaskClient<$Result.GetResult<Prisma.$CheckedTaskPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CheckedTasks.
     * @param {CheckedTaskCreateManyArgs} args - Arguments to create many CheckedTasks.
     * @example
     * // Create many CheckedTasks
     * const checkedTask = await prisma.checkedTask.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CheckedTaskCreateManyArgs>(args?: SelectSubset<T, CheckedTaskCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CheckedTasks and returns the data saved in the database.
     * @param {CheckedTaskCreateManyAndReturnArgs} args - Arguments to create many CheckedTasks.
     * @example
     * // Create many CheckedTasks
     * const checkedTask = await prisma.checkedTask.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CheckedTasks and only return the `id`
     * const checkedTaskWithIdOnly = await prisma.checkedTask.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CheckedTaskCreateManyAndReturnArgs>(args?: SelectSubset<T, CheckedTaskCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CheckedTaskPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CheckedTask.
     * @param {CheckedTaskDeleteArgs} args - Arguments to delete one CheckedTask.
     * @example
     * // Delete one CheckedTask
     * const CheckedTask = await prisma.checkedTask.delete({
     *   where: {
     *     // ... filter to delete one CheckedTask
     *   }
     * })
     * 
     */
    delete<T extends CheckedTaskDeleteArgs>(args: SelectSubset<T, CheckedTaskDeleteArgs<ExtArgs>>): Prisma__CheckedTaskClient<$Result.GetResult<Prisma.$CheckedTaskPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CheckedTask.
     * @param {CheckedTaskUpdateArgs} args - Arguments to update one CheckedTask.
     * @example
     * // Update one CheckedTask
     * const checkedTask = await prisma.checkedTask.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CheckedTaskUpdateArgs>(args: SelectSubset<T, CheckedTaskUpdateArgs<ExtArgs>>): Prisma__CheckedTaskClient<$Result.GetResult<Prisma.$CheckedTaskPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CheckedTasks.
     * @param {CheckedTaskDeleteManyArgs} args - Arguments to filter CheckedTasks to delete.
     * @example
     * // Delete a few CheckedTasks
     * const { count } = await prisma.checkedTask.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CheckedTaskDeleteManyArgs>(args?: SelectSubset<T, CheckedTaskDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CheckedTasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CheckedTaskUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CheckedTasks
     * const checkedTask = await prisma.checkedTask.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CheckedTaskUpdateManyArgs>(args: SelectSubset<T, CheckedTaskUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CheckedTasks and returns the data updated in the database.
     * @param {CheckedTaskUpdateManyAndReturnArgs} args - Arguments to update many CheckedTasks.
     * @example
     * // Update many CheckedTasks
     * const checkedTask = await prisma.checkedTask.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CheckedTasks and only return the `id`
     * const checkedTaskWithIdOnly = await prisma.checkedTask.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CheckedTaskUpdateManyAndReturnArgs>(args: SelectSubset<T, CheckedTaskUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CheckedTaskPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CheckedTask.
     * @param {CheckedTaskUpsertArgs} args - Arguments to update or create a CheckedTask.
     * @example
     * // Update or create a CheckedTask
     * const checkedTask = await prisma.checkedTask.upsert({
     *   create: {
     *     // ... data to create a CheckedTask
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CheckedTask we want to update
     *   }
     * })
     */
    upsert<T extends CheckedTaskUpsertArgs>(args: SelectSubset<T, CheckedTaskUpsertArgs<ExtArgs>>): Prisma__CheckedTaskClient<$Result.GetResult<Prisma.$CheckedTaskPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CheckedTasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CheckedTaskCountArgs} args - Arguments to filter CheckedTasks to count.
     * @example
     * // Count the number of CheckedTasks
     * const count = await prisma.checkedTask.count({
     *   where: {
     *     // ... the filter for the CheckedTasks we want to count
     *   }
     * })
    **/
    count<T extends CheckedTaskCountArgs>(
      args?: Subset<T, CheckedTaskCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CheckedTaskCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CheckedTask.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CheckedTaskAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CheckedTaskAggregateArgs>(args: Subset<T, CheckedTaskAggregateArgs>): Prisma.PrismaPromise<GetCheckedTaskAggregateType<T>>

    /**
     * Group by CheckedTask.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CheckedTaskGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CheckedTaskGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CheckedTaskGroupByArgs['orderBy'] }
        : { orderBy?: CheckedTaskGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CheckedTaskGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCheckedTaskGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CheckedTask model
   */
  readonly fields: CheckedTaskFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CheckedTask.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CheckedTaskClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    task<T extends TaskDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TaskDefaultArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    monitoring<T extends MonitoringDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MonitoringDefaultArgs<ExtArgs>>): Prisma__MonitoringClient<$Result.GetResult<Prisma.$MonitoringPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CheckedTask model
   */ 
  interface CheckedTaskFieldRefs {
    readonly id: FieldRef<"CheckedTask", 'Int'>
    readonly taskId: FieldRef<"CheckedTask", 'Int'>
    readonly monitoringId: FieldRef<"CheckedTask", 'Int'>
    readonly checked: FieldRef<"CheckedTask", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * CheckedTask findUnique
   */
  export type CheckedTaskFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckedTask
     */
    select?: CheckedTaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CheckedTask
     */
    omit?: CheckedTaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheckedTaskInclude<ExtArgs> | null
    /**
     * Filter, which CheckedTask to fetch.
     */
    where: CheckedTaskWhereUniqueInput
  }

  /**
   * CheckedTask findUniqueOrThrow
   */
  export type CheckedTaskFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckedTask
     */
    select?: CheckedTaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CheckedTask
     */
    omit?: CheckedTaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheckedTaskInclude<ExtArgs> | null
    /**
     * Filter, which CheckedTask to fetch.
     */
    where: CheckedTaskWhereUniqueInput
  }

  /**
   * CheckedTask findFirst
   */
  export type CheckedTaskFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckedTask
     */
    select?: CheckedTaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CheckedTask
     */
    omit?: CheckedTaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheckedTaskInclude<ExtArgs> | null
    /**
     * Filter, which CheckedTask to fetch.
     */
    where?: CheckedTaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CheckedTasks to fetch.
     */
    orderBy?: CheckedTaskOrderByWithRelationInput | CheckedTaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CheckedTasks.
     */
    cursor?: CheckedTaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CheckedTasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CheckedTasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CheckedTasks.
     */
    distinct?: CheckedTaskScalarFieldEnum | CheckedTaskScalarFieldEnum[]
  }

  /**
   * CheckedTask findFirstOrThrow
   */
  export type CheckedTaskFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckedTask
     */
    select?: CheckedTaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CheckedTask
     */
    omit?: CheckedTaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheckedTaskInclude<ExtArgs> | null
    /**
     * Filter, which CheckedTask to fetch.
     */
    where?: CheckedTaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CheckedTasks to fetch.
     */
    orderBy?: CheckedTaskOrderByWithRelationInput | CheckedTaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CheckedTasks.
     */
    cursor?: CheckedTaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CheckedTasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CheckedTasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CheckedTasks.
     */
    distinct?: CheckedTaskScalarFieldEnum | CheckedTaskScalarFieldEnum[]
  }

  /**
   * CheckedTask findMany
   */
  export type CheckedTaskFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckedTask
     */
    select?: CheckedTaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CheckedTask
     */
    omit?: CheckedTaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheckedTaskInclude<ExtArgs> | null
    /**
     * Filter, which CheckedTasks to fetch.
     */
    where?: CheckedTaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CheckedTasks to fetch.
     */
    orderBy?: CheckedTaskOrderByWithRelationInput | CheckedTaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CheckedTasks.
     */
    cursor?: CheckedTaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CheckedTasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CheckedTasks.
     */
    skip?: number
    distinct?: CheckedTaskScalarFieldEnum | CheckedTaskScalarFieldEnum[]
  }

  /**
   * CheckedTask create
   */
  export type CheckedTaskCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckedTask
     */
    select?: CheckedTaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CheckedTask
     */
    omit?: CheckedTaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheckedTaskInclude<ExtArgs> | null
    /**
     * The data needed to create a CheckedTask.
     */
    data: XOR<CheckedTaskCreateInput, CheckedTaskUncheckedCreateInput>
  }

  /**
   * CheckedTask createMany
   */
  export type CheckedTaskCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CheckedTasks.
     */
    data: CheckedTaskCreateManyInput | CheckedTaskCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CheckedTask createManyAndReturn
   */
  export type CheckedTaskCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckedTask
     */
    select?: CheckedTaskSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CheckedTask
     */
    omit?: CheckedTaskOmit<ExtArgs> | null
    /**
     * The data used to create many CheckedTasks.
     */
    data: CheckedTaskCreateManyInput | CheckedTaskCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheckedTaskIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CheckedTask update
   */
  export type CheckedTaskUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckedTask
     */
    select?: CheckedTaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CheckedTask
     */
    omit?: CheckedTaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheckedTaskInclude<ExtArgs> | null
    /**
     * The data needed to update a CheckedTask.
     */
    data: XOR<CheckedTaskUpdateInput, CheckedTaskUncheckedUpdateInput>
    /**
     * Choose, which CheckedTask to update.
     */
    where: CheckedTaskWhereUniqueInput
  }

  /**
   * CheckedTask updateMany
   */
  export type CheckedTaskUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CheckedTasks.
     */
    data: XOR<CheckedTaskUpdateManyMutationInput, CheckedTaskUncheckedUpdateManyInput>
    /**
     * Filter which CheckedTasks to update
     */
    where?: CheckedTaskWhereInput
    /**
     * Limit how many CheckedTasks to update.
     */
    limit?: number
  }

  /**
   * CheckedTask updateManyAndReturn
   */
  export type CheckedTaskUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckedTask
     */
    select?: CheckedTaskSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CheckedTask
     */
    omit?: CheckedTaskOmit<ExtArgs> | null
    /**
     * The data used to update CheckedTasks.
     */
    data: XOR<CheckedTaskUpdateManyMutationInput, CheckedTaskUncheckedUpdateManyInput>
    /**
     * Filter which CheckedTasks to update
     */
    where?: CheckedTaskWhereInput
    /**
     * Limit how many CheckedTasks to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheckedTaskIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CheckedTask upsert
   */
  export type CheckedTaskUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckedTask
     */
    select?: CheckedTaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CheckedTask
     */
    omit?: CheckedTaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheckedTaskInclude<ExtArgs> | null
    /**
     * The filter to search for the CheckedTask to update in case it exists.
     */
    where: CheckedTaskWhereUniqueInput
    /**
     * In case the CheckedTask found by the `where` argument doesn't exist, create a new CheckedTask with this data.
     */
    create: XOR<CheckedTaskCreateInput, CheckedTaskUncheckedCreateInput>
    /**
     * In case the CheckedTask was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CheckedTaskUpdateInput, CheckedTaskUncheckedUpdateInput>
  }

  /**
   * CheckedTask delete
   */
  export type CheckedTaskDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckedTask
     */
    select?: CheckedTaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CheckedTask
     */
    omit?: CheckedTaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheckedTaskInclude<ExtArgs> | null
    /**
     * Filter which CheckedTask to delete.
     */
    where: CheckedTaskWhereUniqueInput
  }

  /**
   * CheckedTask deleteMany
   */
  export type CheckedTaskDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CheckedTasks to delete
     */
    where?: CheckedTaskWhereInput
    /**
     * Limit how many CheckedTasks to delete.
     */
    limit?: number
  }

  /**
   * CheckedTask without action
   */
  export type CheckedTaskDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckedTask
     */
    select?: CheckedTaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CheckedTask
     */
    omit?: CheckedTaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheckedTaskInclude<ExtArgs> | null
  }


  /**
   * Model Task
   */

  export type AggregateTask = {
    _count: TaskCountAggregateOutputType | null
    _avg: TaskAvgAggregateOutputType | null
    _sum: TaskSumAggregateOutputType | null
    _min: TaskMinAggregateOutputType | null
    _max: TaskMaxAggregateOutputType | null
  }

  export type TaskAvgAggregateOutputType = {
    id: number | null
    frequency: number | null
    deviceId: number | null
  }

  export type TaskSumAggregateOutputType = {
    id: number | null
    frequency: number | null
    deviceId: number | null
  }

  export type TaskMinAggregateOutputType = {
    id: number | null
    activity: string | null
    frequency: number | null
    deviceId: number | null
  }

  export type TaskMaxAggregateOutputType = {
    id: number | null
    activity: string | null
    frequency: number | null
    deviceId: number | null
  }

  export type TaskCountAggregateOutputType = {
    id: number
    activity: number
    frequency: number
    deviceId: number
    _all: number
  }


  export type TaskAvgAggregateInputType = {
    id?: true
    frequency?: true
    deviceId?: true
  }

  export type TaskSumAggregateInputType = {
    id?: true
    frequency?: true
    deviceId?: true
  }

  export type TaskMinAggregateInputType = {
    id?: true
    activity?: true
    frequency?: true
    deviceId?: true
  }

  export type TaskMaxAggregateInputType = {
    id?: true
    activity?: true
    frequency?: true
    deviceId?: true
  }

  export type TaskCountAggregateInputType = {
    id?: true
    activity?: true
    frequency?: true
    deviceId?: true
    _all?: true
  }

  export type TaskAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Task to aggregate.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tasks
    **/
    _count?: true | TaskCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TaskAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TaskSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TaskMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TaskMaxAggregateInputType
  }

  export type GetTaskAggregateType<T extends TaskAggregateArgs> = {
        [P in keyof T & keyof AggregateTask]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTask[P]>
      : GetScalarType<T[P], AggregateTask[P]>
  }




  export type TaskGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TaskWhereInput
    orderBy?: TaskOrderByWithAggregationInput | TaskOrderByWithAggregationInput[]
    by: TaskScalarFieldEnum[] | TaskScalarFieldEnum
    having?: TaskScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TaskCountAggregateInputType | true
    _avg?: TaskAvgAggregateInputType
    _sum?: TaskSumAggregateInputType
    _min?: TaskMinAggregateInputType
    _max?: TaskMaxAggregateInputType
  }

  export type TaskGroupByOutputType = {
    id: number
    activity: string
    frequency: number
    deviceId: number
    _count: TaskCountAggregateOutputType | null
    _avg: TaskAvgAggregateOutputType | null
    _sum: TaskSumAggregateOutputType | null
    _min: TaskMinAggregateOutputType | null
    _max: TaskMaxAggregateOutputType | null
  }

  type GetTaskGroupByPayload<T extends TaskGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TaskGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TaskGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TaskGroupByOutputType[P]>
            : GetScalarType<T[P], TaskGroupByOutputType[P]>
        }
      >
    >


  export type TaskSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    activity?: boolean
    frequency?: boolean
    deviceId?: boolean
    device?: boolean | DeviceDefaultArgs<ExtArgs>
    checkedTasks?: boolean | Task$checkedTasksArgs<ExtArgs>
    _count?: boolean | TaskCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["task"]>

  export type TaskSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    activity?: boolean
    frequency?: boolean
    deviceId?: boolean
    device?: boolean | DeviceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["task"]>

  export type TaskSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    activity?: boolean
    frequency?: boolean
    deviceId?: boolean
    device?: boolean | DeviceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["task"]>

  export type TaskSelectScalar = {
    id?: boolean
    activity?: boolean
    frequency?: boolean
    deviceId?: boolean
  }

  export type TaskOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "activity" | "frequency" | "deviceId", ExtArgs["result"]["task"]>
  export type TaskInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    device?: boolean | DeviceDefaultArgs<ExtArgs>
    checkedTasks?: boolean | Task$checkedTasksArgs<ExtArgs>
    _count?: boolean | TaskCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TaskIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    device?: boolean | DeviceDefaultArgs<ExtArgs>
  }
  export type TaskIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    device?: boolean | DeviceDefaultArgs<ExtArgs>
  }

  export type $TaskPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Task"
    objects: {
      device: Prisma.$DevicePayload<ExtArgs>
      checkedTasks: Prisma.$CheckedTaskPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      activity: string
      frequency: number
      deviceId: number
    }, ExtArgs["result"]["task"]>
    composites: {}
  }

  type TaskGetPayload<S extends boolean | null | undefined | TaskDefaultArgs> = $Result.GetResult<Prisma.$TaskPayload, S>

  type TaskCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TaskFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TaskCountAggregateInputType | true
    }

  export interface TaskDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Task'], meta: { name: 'Task' } }
    /**
     * Find zero or one Task that matches the filter.
     * @param {TaskFindUniqueArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TaskFindUniqueArgs>(args: SelectSubset<T, TaskFindUniqueArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Task that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TaskFindUniqueOrThrowArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TaskFindUniqueOrThrowArgs>(args: SelectSubset<T, TaskFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Task that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskFindFirstArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TaskFindFirstArgs>(args?: SelectSubset<T, TaskFindFirstArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Task that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskFindFirstOrThrowArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TaskFindFirstOrThrowArgs>(args?: SelectSubset<T, TaskFindFirstOrThrowArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Tasks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tasks
     * const tasks = await prisma.task.findMany()
     * 
     * // Get first 10 Tasks
     * const tasks = await prisma.task.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const taskWithIdOnly = await prisma.task.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TaskFindManyArgs>(args?: SelectSubset<T, TaskFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Task.
     * @param {TaskCreateArgs} args - Arguments to create a Task.
     * @example
     * // Create one Task
     * const Task = await prisma.task.create({
     *   data: {
     *     // ... data to create a Task
     *   }
     * })
     * 
     */
    create<T extends TaskCreateArgs>(args: SelectSubset<T, TaskCreateArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Tasks.
     * @param {TaskCreateManyArgs} args - Arguments to create many Tasks.
     * @example
     * // Create many Tasks
     * const task = await prisma.task.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TaskCreateManyArgs>(args?: SelectSubset<T, TaskCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Tasks and returns the data saved in the database.
     * @param {TaskCreateManyAndReturnArgs} args - Arguments to create many Tasks.
     * @example
     * // Create many Tasks
     * const task = await prisma.task.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Tasks and only return the `id`
     * const taskWithIdOnly = await prisma.task.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TaskCreateManyAndReturnArgs>(args?: SelectSubset<T, TaskCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Task.
     * @param {TaskDeleteArgs} args - Arguments to delete one Task.
     * @example
     * // Delete one Task
     * const Task = await prisma.task.delete({
     *   where: {
     *     // ... filter to delete one Task
     *   }
     * })
     * 
     */
    delete<T extends TaskDeleteArgs>(args: SelectSubset<T, TaskDeleteArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Task.
     * @param {TaskUpdateArgs} args - Arguments to update one Task.
     * @example
     * // Update one Task
     * const task = await prisma.task.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TaskUpdateArgs>(args: SelectSubset<T, TaskUpdateArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Tasks.
     * @param {TaskDeleteManyArgs} args - Arguments to filter Tasks to delete.
     * @example
     * // Delete a few Tasks
     * const { count } = await prisma.task.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TaskDeleteManyArgs>(args?: SelectSubset<T, TaskDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tasks
     * const task = await prisma.task.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TaskUpdateManyArgs>(args: SelectSubset<T, TaskUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tasks and returns the data updated in the database.
     * @param {TaskUpdateManyAndReturnArgs} args - Arguments to update many Tasks.
     * @example
     * // Update many Tasks
     * const task = await prisma.task.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Tasks and only return the `id`
     * const taskWithIdOnly = await prisma.task.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TaskUpdateManyAndReturnArgs>(args: SelectSubset<T, TaskUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Task.
     * @param {TaskUpsertArgs} args - Arguments to update or create a Task.
     * @example
     * // Update or create a Task
     * const task = await prisma.task.upsert({
     *   create: {
     *     // ... data to create a Task
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Task we want to update
     *   }
     * })
     */
    upsert<T extends TaskUpsertArgs>(args: SelectSubset<T, TaskUpsertArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Tasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskCountArgs} args - Arguments to filter Tasks to count.
     * @example
     * // Count the number of Tasks
     * const count = await prisma.task.count({
     *   where: {
     *     // ... the filter for the Tasks we want to count
     *   }
     * })
    **/
    count<T extends TaskCountArgs>(
      args?: Subset<T, TaskCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TaskCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Task.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TaskAggregateArgs>(args: Subset<T, TaskAggregateArgs>): Prisma.PrismaPromise<GetTaskAggregateType<T>>

    /**
     * Group by Task.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TaskGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TaskGroupByArgs['orderBy'] }
        : { orderBy?: TaskGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TaskGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTaskGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Task model
   */
  readonly fields: TaskFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Task.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TaskClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    device<T extends DeviceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DeviceDefaultArgs<ExtArgs>>): Prisma__DeviceClient<$Result.GetResult<Prisma.$DevicePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    checkedTasks<T extends Task$checkedTasksArgs<ExtArgs> = {}>(args?: Subset<T, Task$checkedTasksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CheckedTaskPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Task model
   */ 
  interface TaskFieldRefs {
    readonly id: FieldRef<"Task", 'Int'>
    readonly activity: FieldRef<"Task", 'String'>
    readonly frequency: FieldRef<"Task", 'Int'>
    readonly deviceId: FieldRef<"Task", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Task findUnique
   */
  export type TaskFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where: TaskWhereUniqueInput
  }

  /**
   * Task findUniqueOrThrow
   */
  export type TaskFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where: TaskWhereUniqueInput
  }

  /**
   * Task findFirst
   */
  export type TaskFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tasks.
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tasks.
     */
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * Task findFirstOrThrow
   */
  export type TaskFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tasks.
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tasks.
     */
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * Task findMany
   */
  export type TaskFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Tasks to fetch.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tasks.
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * Task create
   */
  export type TaskCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * The data needed to create a Task.
     */
    data: XOR<TaskCreateInput, TaskUncheckedCreateInput>
  }

  /**
   * Task createMany
   */
  export type TaskCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tasks.
     */
    data: TaskCreateManyInput | TaskCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Task createManyAndReturn
   */
  export type TaskCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * The data used to create many Tasks.
     */
    data: TaskCreateManyInput | TaskCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Task update
   */
  export type TaskUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * The data needed to update a Task.
     */
    data: XOR<TaskUpdateInput, TaskUncheckedUpdateInput>
    /**
     * Choose, which Task to update.
     */
    where: TaskWhereUniqueInput
  }

  /**
   * Task updateMany
   */
  export type TaskUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tasks.
     */
    data: XOR<TaskUpdateManyMutationInput, TaskUncheckedUpdateManyInput>
    /**
     * Filter which Tasks to update
     */
    where?: TaskWhereInput
    /**
     * Limit how many Tasks to update.
     */
    limit?: number
  }

  /**
   * Task updateManyAndReturn
   */
  export type TaskUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * The data used to update Tasks.
     */
    data: XOR<TaskUpdateManyMutationInput, TaskUncheckedUpdateManyInput>
    /**
     * Filter which Tasks to update
     */
    where?: TaskWhereInput
    /**
     * Limit how many Tasks to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Task upsert
   */
  export type TaskUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * The filter to search for the Task to update in case it exists.
     */
    where: TaskWhereUniqueInput
    /**
     * In case the Task found by the `where` argument doesn't exist, create a new Task with this data.
     */
    create: XOR<TaskCreateInput, TaskUncheckedCreateInput>
    /**
     * In case the Task was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TaskUpdateInput, TaskUncheckedUpdateInput>
  }

  /**
   * Task delete
   */
  export type TaskDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter which Task to delete.
     */
    where: TaskWhereUniqueInput
  }

  /**
   * Task deleteMany
   */
  export type TaskDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tasks to delete
     */
    where?: TaskWhereInput
    /**
     * Limit how many Tasks to delete.
     */
    limit?: number
  }

  /**
   * Task.checkedTasks
   */
  export type Task$checkedTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckedTask
     */
    select?: CheckedTaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CheckedTask
     */
    omit?: CheckedTaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheckedTaskInclude<ExtArgs> | null
    where?: CheckedTaskWhereInput
    orderBy?: CheckedTaskOrderByWithRelationInput | CheckedTaskOrderByWithRelationInput[]
    cursor?: CheckedTaskWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CheckedTaskScalarFieldEnum | CheckedTaskScalarFieldEnum[]
  }

  /**
   * Task without action
   */
  export type TaskDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    username: 'username',
    email: 'email',
    password: 'password',
    image: 'image'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const DeviceScalarFieldEnum: {
    id: 'id',
    devicename: 'devicename',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type DeviceScalarFieldEnum = (typeof DeviceScalarFieldEnum)[keyof typeof DeviceScalarFieldEnum]


  export const MonitoringScalarFieldEnum: {
    id: 'id',
    Tester: 'Tester',
    Date: 'Date',
    MonitoringType: 'MonitoringType',
    Documentation: 'Documentation',
    Status: 'Status',
    Sumary: 'Sumary',
    Signature: 'Signature',
    userId: 'userId',
    deviceId: 'deviceId'
  };

  export type MonitoringScalarFieldEnum = (typeof MonitoringScalarFieldEnum)[keyof typeof MonitoringScalarFieldEnum]


  export const CheckedTaskScalarFieldEnum: {
    id: 'id',
    taskId: 'taskId',
    monitoringId: 'monitoringId',
    checked: 'checked'
  };

  export type CheckedTaskScalarFieldEnum = (typeof CheckedTaskScalarFieldEnum)[keyof typeof CheckedTaskScalarFieldEnum]


  export const TaskScalarFieldEnum: {
    id: 'id',
    activity: 'activity',
    frequency: 'frequency',
    deviceId: 'deviceId'
  };

  export type TaskScalarFieldEnum = (typeof TaskScalarFieldEnum)[keyof typeof TaskScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    username?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    image?: StringNullableFilter<"User"> | string | null
    monitorings?: MonitoringListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    image?: SortOrderInput | SortOrder
    monitorings?: MonitoringOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    username?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    image?: StringNullableFilter<"User"> | string | null
    monitorings?: MonitoringListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    image?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    username?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    image?: StringNullableWithAggregatesFilter<"User"> | string | null
  }

  export type DeviceWhereInput = {
    AND?: DeviceWhereInput | DeviceWhereInput[]
    OR?: DeviceWhereInput[]
    NOT?: DeviceWhereInput | DeviceWhereInput[]
    id?: IntFilter<"Device"> | number
    devicename?: StringFilter<"Device"> | string
    createdAt?: DateTimeFilter<"Device"> | Date | string
    updatedAt?: DateTimeFilter<"Device"> | Date | string
    monitorings?: MonitoringListRelationFilter
    Task?: TaskListRelationFilter
  }

  export type DeviceOrderByWithRelationInput = {
    id?: SortOrder
    devicename?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    monitorings?: MonitoringOrderByRelationAggregateInput
    Task?: TaskOrderByRelationAggregateInput
  }

  export type DeviceWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: DeviceWhereInput | DeviceWhereInput[]
    OR?: DeviceWhereInput[]
    NOT?: DeviceWhereInput | DeviceWhereInput[]
    devicename?: StringFilter<"Device"> | string
    createdAt?: DateTimeFilter<"Device"> | Date | string
    updatedAt?: DateTimeFilter<"Device"> | Date | string
    monitorings?: MonitoringListRelationFilter
    Task?: TaskListRelationFilter
  }, "id">

  export type DeviceOrderByWithAggregationInput = {
    id?: SortOrder
    devicename?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: DeviceCountOrderByAggregateInput
    _avg?: DeviceAvgOrderByAggregateInput
    _max?: DeviceMaxOrderByAggregateInput
    _min?: DeviceMinOrderByAggregateInput
    _sum?: DeviceSumOrderByAggregateInput
  }

  export type DeviceScalarWhereWithAggregatesInput = {
    AND?: DeviceScalarWhereWithAggregatesInput | DeviceScalarWhereWithAggregatesInput[]
    OR?: DeviceScalarWhereWithAggregatesInput[]
    NOT?: DeviceScalarWhereWithAggregatesInput | DeviceScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Device"> | number
    devicename?: StringWithAggregatesFilter<"Device"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Device"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Device"> | Date | string
  }

  export type MonitoringWhereInput = {
    AND?: MonitoringWhereInput | MonitoringWhereInput[]
    OR?: MonitoringWhereInput[]
    NOT?: MonitoringWhereInput | MonitoringWhereInput[]
    id?: IntFilter<"Monitoring"> | number
    Tester?: StringFilter<"Monitoring"> | string
    Date?: DateTimeFilter<"Monitoring"> | Date | string
    MonitoringType?: IntFilter<"Monitoring"> | number
    Documentation?: StringFilter<"Monitoring"> | string
    Status?: BoolFilter<"Monitoring"> | boolean
    Sumary?: StringFilter<"Monitoring"> | string
    Signature?: StringFilter<"Monitoring"> | string
    userId?: StringFilter<"Monitoring"> | string
    deviceId?: IntFilter<"Monitoring"> | number
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    device?: XOR<DeviceScalarRelationFilter, DeviceWhereInput>
    checkedTasks?: CheckedTaskListRelationFilter
  }

  export type MonitoringOrderByWithRelationInput = {
    id?: SortOrder
    Tester?: SortOrder
    Date?: SortOrder
    MonitoringType?: SortOrder
    Documentation?: SortOrder
    Status?: SortOrder
    Sumary?: SortOrder
    Signature?: SortOrder
    userId?: SortOrder
    deviceId?: SortOrder
    user?: UserOrderByWithRelationInput
    device?: DeviceOrderByWithRelationInput
    checkedTasks?: CheckedTaskOrderByRelationAggregateInput
  }

  export type MonitoringWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: MonitoringWhereInput | MonitoringWhereInput[]
    OR?: MonitoringWhereInput[]
    NOT?: MonitoringWhereInput | MonitoringWhereInput[]
    Tester?: StringFilter<"Monitoring"> | string
    Date?: DateTimeFilter<"Monitoring"> | Date | string
    MonitoringType?: IntFilter<"Monitoring"> | number
    Documentation?: StringFilter<"Monitoring"> | string
    Status?: BoolFilter<"Monitoring"> | boolean
    Sumary?: StringFilter<"Monitoring"> | string
    Signature?: StringFilter<"Monitoring"> | string
    userId?: StringFilter<"Monitoring"> | string
    deviceId?: IntFilter<"Monitoring"> | number
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    device?: XOR<DeviceScalarRelationFilter, DeviceWhereInput>
    checkedTasks?: CheckedTaskListRelationFilter
  }, "id">

  export type MonitoringOrderByWithAggregationInput = {
    id?: SortOrder
    Tester?: SortOrder
    Date?: SortOrder
    MonitoringType?: SortOrder
    Documentation?: SortOrder
    Status?: SortOrder
    Sumary?: SortOrder
    Signature?: SortOrder
    userId?: SortOrder
    deviceId?: SortOrder
    _count?: MonitoringCountOrderByAggregateInput
    _avg?: MonitoringAvgOrderByAggregateInput
    _max?: MonitoringMaxOrderByAggregateInput
    _min?: MonitoringMinOrderByAggregateInput
    _sum?: MonitoringSumOrderByAggregateInput
  }

  export type MonitoringScalarWhereWithAggregatesInput = {
    AND?: MonitoringScalarWhereWithAggregatesInput | MonitoringScalarWhereWithAggregatesInput[]
    OR?: MonitoringScalarWhereWithAggregatesInput[]
    NOT?: MonitoringScalarWhereWithAggregatesInput | MonitoringScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Monitoring"> | number
    Tester?: StringWithAggregatesFilter<"Monitoring"> | string
    Date?: DateTimeWithAggregatesFilter<"Monitoring"> | Date | string
    MonitoringType?: IntWithAggregatesFilter<"Monitoring"> | number
    Documentation?: StringWithAggregatesFilter<"Monitoring"> | string
    Status?: BoolWithAggregatesFilter<"Monitoring"> | boolean
    Sumary?: StringWithAggregatesFilter<"Monitoring"> | string
    Signature?: StringWithAggregatesFilter<"Monitoring"> | string
    userId?: StringWithAggregatesFilter<"Monitoring"> | string
    deviceId?: IntWithAggregatesFilter<"Monitoring"> | number
  }

  export type CheckedTaskWhereInput = {
    AND?: CheckedTaskWhereInput | CheckedTaskWhereInput[]
    OR?: CheckedTaskWhereInput[]
    NOT?: CheckedTaskWhereInput | CheckedTaskWhereInput[]
    id?: IntFilter<"CheckedTask"> | number
    taskId?: IntFilter<"CheckedTask"> | number
    monitoringId?: IntFilter<"CheckedTask"> | number
    checked?: BoolFilter<"CheckedTask"> | boolean
    task?: XOR<TaskScalarRelationFilter, TaskWhereInput>
    monitoring?: XOR<MonitoringScalarRelationFilter, MonitoringWhereInput>
  }

  export type CheckedTaskOrderByWithRelationInput = {
    id?: SortOrder
    taskId?: SortOrder
    monitoringId?: SortOrder
    checked?: SortOrder
    task?: TaskOrderByWithRelationInput
    monitoring?: MonitoringOrderByWithRelationInput
  }

  export type CheckedTaskWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CheckedTaskWhereInput | CheckedTaskWhereInput[]
    OR?: CheckedTaskWhereInput[]
    NOT?: CheckedTaskWhereInput | CheckedTaskWhereInput[]
    taskId?: IntFilter<"CheckedTask"> | number
    monitoringId?: IntFilter<"CheckedTask"> | number
    checked?: BoolFilter<"CheckedTask"> | boolean
    task?: XOR<TaskScalarRelationFilter, TaskWhereInput>
    monitoring?: XOR<MonitoringScalarRelationFilter, MonitoringWhereInput>
  }, "id">

  export type CheckedTaskOrderByWithAggregationInput = {
    id?: SortOrder
    taskId?: SortOrder
    monitoringId?: SortOrder
    checked?: SortOrder
    _count?: CheckedTaskCountOrderByAggregateInput
    _avg?: CheckedTaskAvgOrderByAggregateInput
    _max?: CheckedTaskMaxOrderByAggregateInput
    _min?: CheckedTaskMinOrderByAggregateInput
    _sum?: CheckedTaskSumOrderByAggregateInput
  }

  export type CheckedTaskScalarWhereWithAggregatesInput = {
    AND?: CheckedTaskScalarWhereWithAggregatesInput | CheckedTaskScalarWhereWithAggregatesInput[]
    OR?: CheckedTaskScalarWhereWithAggregatesInput[]
    NOT?: CheckedTaskScalarWhereWithAggregatesInput | CheckedTaskScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"CheckedTask"> | number
    taskId?: IntWithAggregatesFilter<"CheckedTask"> | number
    monitoringId?: IntWithAggregatesFilter<"CheckedTask"> | number
    checked?: BoolWithAggregatesFilter<"CheckedTask"> | boolean
  }

  export type TaskWhereInput = {
    AND?: TaskWhereInput | TaskWhereInput[]
    OR?: TaskWhereInput[]
    NOT?: TaskWhereInput | TaskWhereInput[]
    id?: IntFilter<"Task"> | number
    activity?: StringFilter<"Task"> | string
    frequency?: IntFilter<"Task"> | number
    deviceId?: IntFilter<"Task"> | number
    device?: XOR<DeviceScalarRelationFilter, DeviceWhereInput>
    checkedTasks?: CheckedTaskListRelationFilter
  }

  export type TaskOrderByWithRelationInput = {
    id?: SortOrder
    activity?: SortOrder
    frequency?: SortOrder
    deviceId?: SortOrder
    device?: DeviceOrderByWithRelationInput
    checkedTasks?: CheckedTaskOrderByRelationAggregateInput
  }

  export type TaskWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TaskWhereInput | TaskWhereInput[]
    OR?: TaskWhereInput[]
    NOT?: TaskWhereInput | TaskWhereInput[]
    activity?: StringFilter<"Task"> | string
    frequency?: IntFilter<"Task"> | number
    deviceId?: IntFilter<"Task"> | number
    device?: XOR<DeviceScalarRelationFilter, DeviceWhereInput>
    checkedTasks?: CheckedTaskListRelationFilter
  }, "id">

  export type TaskOrderByWithAggregationInput = {
    id?: SortOrder
    activity?: SortOrder
    frequency?: SortOrder
    deviceId?: SortOrder
    _count?: TaskCountOrderByAggregateInput
    _avg?: TaskAvgOrderByAggregateInput
    _max?: TaskMaxOrderByAggregateInput
    _min?: TaskMinOrderByAggregateInput
    _sum?: TaskSumOrderByAggregateInput
  }

  export type TaskScalarWhereWithAggregatesInput = {
    AND?: TaskScalarWhereWithAggregatesInput | TaskScalarWhereWithAggregatesInput[]
    OR?: TaskScalarWhereWithAggregatesInput[]
    NOT?: TaskScalarWhereWithAggregatesInput | TaskScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Task"> | number
    activity?: StringWithAggregatesFilter<"Task"> | string
    frequency?: IntWithAggregatesFilter<"Task"> | number
    deviceId?: IntWithAggregatesFilter<"Task"> | number
  }

  export type UserCreateInput = {
    id?: string
    username: string
    email: string
    password: string
    image?: string | null
    monitorings?: MonitoringCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    username: string
    email: string
    password: string
    image?: string | null
    monitorings?: MonitoringUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    monitorings?: MonitoringUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    monitorings?: MonitoringUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    username: string
    email: string
    password: string
    image?: string | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DeviceCreateInput = {
    devicename: string
    createdAt?: Date | string
    updatedAt?: Date | string
    monitorings?: MonitoringCreateNestedManyWithoutDeviceInput
    Task?: TaskCreateNestedManyWithoutDeviceInput
  }

  export type DeviceUncheckedCreateInput = {
    id?: number
    devicename: string
    createdAt?: Date | string
    updatedAt?: Date | string
    monitorings?: MonitoringUncheckedCreateNestedManyWithoutDeviceInput
    Task?: TaskUncheckedCreateNestedManyWithoutDeviceInput
  }

  export type DeviceUpdateInput = {
    devicename?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    monitorings?: MonitoringUpdateManyWithoutDeviceNestedInput
    Task?: TaskUpdateManyWithoutDeviceNestedInput
  }

  export type DeviceUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    devicename?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    monitorings?: MonitoringUncheckedUpdateManyWithoutDeviceNestedInput
    Task?: TaskUncheckedUpdateManyWithoutDeviceNestedInput
  }

  export type DeviceCreateManyInput = {
    id?: number
    devicename: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DeviceUpdateManyMutationInput = {
    devicename?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DeviceUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    devicename?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MonitoringCreateInput = {
    Tester: string
    Date: Date | string
    MonitoringType: number
    Documentation: string
    Status: boolean
    Sumary: string
    Signature: string
    user: UserCreateNestedOneWithoutMonitoringsInput
    device: DeviceCreateNestedOneWithoutMonitoringsInput
    checkedTasks?: CheckedTaskCreateNestedManyWithoutMonitoringInput
  }

  export type MonitoringUncheckedCreateInput = {
    id?: number
    Tester: string
    Date: Date | string
    MonitoringType: number
    Documentation: string
    Status: boolean
    Sumary: string
    Signature: string
    userId: string
    deviceId: number
    checkedTasks?: CheckedTaskUncheckedCreateNestedManyWithoutMonitoringInput
  }

  export type MonitoringUpdateInput = {
    Tester?: StringFieldUpdateOperationsInput | string
    Date?: DateTimeFieldUpdateOperationsInput | Date | string
    MonitoringType?: IntFieldUpdateOperationsInput | number
    Documentation?: StringFieldUpdateOperationsInput | string
    Status?: BoolFieldUpdateOperationsInput | boolean
    Sumary?: StringFieldUpdateOperationsInput | string
    Signature?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutMonitoringsNestedInput
    device?: DeviceUpdateOneRequiredWithoutMonitoringsNestedInput
    checkedTasks?: CheckedTaskUpdateManyWithoutMonitoringNestedInput
  }

  export type MonitoringUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    Tester?: StringFieldUpdateOperationsInput | string
    Date?: DateTimeFieldUpdateOperationsInput | Date | string
    MonitoringType?: IntFieldUpdateOperationsInput | number
    Documentation?: StringFieldUpdateOperationsInput | string
    Status?: BoolFieldUpdateOperationsInput | boolean
    Sumary?: StringFieldUpdateOperationsInput | string
    Signature?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    deviceId?: IntFieldUpdateOperationsInput | number
    checkedTasks?: CheckedTaskUncheckedUpdateManyWithoutMonitoringNestedInput
  }

  export type MonitoringCreateManyInput = {
    id?: number
    Tester: string
    Date: Date | string
    MonitoringType: number
    Documentation: string
    Status: boolean
    Sumary: string
    Signature: string
    userId: string
    deviceId: number
  }

  export type MonitoringUpdateManyMutationInput = {
    Tester?: StringFieldUpdateOperationsInput | string
    Date?: DateTimeFieldUpdateOperationsInput | Date | string
    MonitoringType?: IntFieldUpdateOperationsInput | number
    Documentation?: StringFieldUpdateOperationsInput | string
    Status?: BoolFieldUpdateOperationsInput | boolean
    Sumary?: StringFieldUpdateOperationsInput | string
    Signature?: StringFieldUpdateOperationsInput | string
  }

  export type MonitoringUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    Tester?: StringFieldUpdateOperationsInput | string
    Date?: DateTimeFieldUpdateOperationsInput | Date | string
    MonitoringType?: IntFieldUpdateOperationsInput | number
    Documentation?: StringFieldUpdateOperationsInput | string
    Status?: BoolFieldUpdateOperationsInput | boolean
    Sumary?: StringFieldUpdateOperationsInput | string
    Signature?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    deviceId?: IntFieldUpdateOperationsInput | number
  }

  export type CheckedTaskCreateInput = {
    checked: boolean
    task: TaskCreateNestedOneWithoutCheckedTasksInput
    monitoring: MonitoringCreateNestedOneWithoutCheckedTasksInput
  }

  export type CheckedTaskUncheckedCreateInput = {
    id?: number
    taskId: number
    monitoringId: number
    checked: boolean
  }

  export type CheckedTaskUpdateInput = {
    checked?: BoolFieldUpdateOperationsInput | boolean
    task?: TaskUpdateOneRequiredWithoutCheckedTasksNestedInput
    monitoring?: MonitoringUpdateOneRequiredWithoutCheckedTasksNestedInput
  }

  export type CheckedTaskUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    taskId?: IntFieldUpdateOperationsInput | number
    monitoringId?: IntFieldUpdateOperationsInput | number
    checked?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CheckedTaskCreateManyInput = {
    id?: number
    taskId: number
    monitoringId: number
    checked: boolean
  }

  export type CheckedTaskUpdateManyMutationInput = {
    checked?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CheckedTaskUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    taskId?: IntFieldUpdateOperationsInput | number
    monitoringId?: IntFieldUpdateOperationsInput | number
    checked?: BoolFieldUpdateOperationsInput | boolean
  }

  export type TaskCreateInput = {
    activity: string
    frequency: number
    device: DeviceCreateNestedOneWithoutTaskInput
    checkedTasks?: CheckedTaskCreateNestedManyWithoutTaskInput
  }

  export type TaskUncheckedCreateInput = {
    id?: number
    activity: string
    frequency: number
    deviceId: number
    checkedTasks?: CheckedTaskUncheckedCreateNestedManyWithoutTaskInput
  }

  export type TaskUpdateInput = {
    activity?: StringFieldUpdateOperationsInput | string
    frequency?: IntFieldUpdateOperationsInput | number
    device?: DeviceUpdateOneRequiredWithoutTaskNestedInput
    checkedTasks?: CheckedTaskUpdateManyWithoutTaskNestedInput
  }

  export type TaskUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    activity?: StringFieldUpdateOperationsInput | string
    frequency?: IntFieldUpdateOperationsInput | number
    deviceId?: IntFieldUpdateOperationsInput | number
    checkedTasks?: CheckedTaskUncheckedUpdateManyWithoutTaskNestedInput
  }

  export type TaskCreateManyInput = {
    id?: number
    activity: string
    frequency: number
    deviceId: number
  }

  export type TaskUpdateManyMutationInput = {
    activity?: StringFieldUpdateOperationsInput | string
    frequency?: IntFieldUpdateOperationsInput | number
  }

  export type TaskUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    activity?: StringFieldUpdateOperationsInput | string
    frequency?: IntFieldUpdateOperationsInput | number
    deviceId?: IntFieldUpdateOperationsInput | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type MonitoringListRelationFilter = {
    every?: MonitoringWhereInput
    some?: MonitoringWhereInput
    none?: MonitoringWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type MonitoringOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    image?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    image?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    image?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type TaskListRelationFilter = {
    every?: TaskWhereInput
    some?: TaskWhereInput
    none?: TaskWhereInput
  }

  export type TaskOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DeviceCountOrderByAggregateInput = {
    id?: SortOrder
    devicename?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DeviceAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DeviceMaxOrderByAggregateInput = {
    id?: SortOrder
    devicename?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DeviceMinOrderByAggregateInput = {
    id?: SortOrder
    devicename?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DeviceSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type DeviceScalarRelationFilter = {
    is?: DeviceWhereInput
    isNot?: DeviceWhereInput
  }

  export type CheckedTaskListRelationFilter = {
    every?: CheckedTaskWhereInput
    some?: CheckedTaskWhereInput
    none?: CheckedTaskWhereInput
  }

  export type CheckedTaskOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MonitoringCountOrderByAggregateInput = {
    id?: SortOrder
    Tester?: SortOrder
    Date?: SortOrder
    MonitoringType?: SortOrder
    Documentation?: SortOrder
    Status?: SortOrder
    Sumary?: SortOrder
    Signature?: SortOrder
    userId?: SortOrder
    deviceId?: SortOrder
  }

  export type MonitoringAvgOrderByAggregateInput = {
    id?: SortOrder
    MonitoringType?: SortOrder
    deviceId?: SortOrder
  }

  export type MonitoringMaxOrderByAggregateInput = {
    id?: SortOrder
    Tester?: SortOrder
    Date?: SortOrder
    MonitoringType?: SortOrder
    Documentation?: SortOrder
    Status?: SortOrder
    Sumary?: SortOrder
    Signature?: SortOrder
    userId?: SortOrder
    deviceId?: SortOrder
  }

  export type MonitoringMinOrderByAggregateInput = {
    id?: SortOrder
    Tester?: SortOrder
    Date?: SortOrder
    MonitoringType?: SortOrder
    Documentation?: SortOrder
    Status?: SortOrder
    Sumary?: SortOrder
    Signature?: SortOrder
    userId?: SortOrder
    deviceId?: SortOrder
  }

  export type MonitoringSumOrderByAggregateInput = {
    id?: SortOrder
    MonitoringType?: SortOrder
    deviceId?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type TaskScalarRelationFilter = {
    is?: TaskWhereInput
    isNot?: TaskWhereInput
  }

  export type MonitoringScalarRelationFilter = {
    is?: MonitoringWhereInput
    isNot?: MonitoringWhereInput
  }

  export type CheckedTaskCountOrderByAggregateInput = {
    id?: SortOrder
    taskId?: SortOrder
    monitoringId?: SortOrder
    checked?: SortOrder
  }

  export type CheckedTaskAvgOrderByAggregateInput = {
    id?: SortOrder
    taskId?: SortOrder
    monitoringId?: SortOrder
  }

  export type CheckedTaskMaxOrderByAggregateInput = {
    id?: SortOrder
    taskId?: SortOrder
    monitoringId?: SortOrder
    checked?: SortOrder
  }

  export type CheckedTaskMinOrderByAggregateInput = {
    id?: SortOrder
    taskId?: SortOrder
    monitoringId?: SortOrder
    checked?: SortOrder
  }

  export type CheckedTaskSumOrderByAggregateInput = {
    id?: SortOrder
    taskId?: SortOrder
    monitoringId?: SortOrder
  }

  export type TaskCountOrderByAggregateInput = {
    id?: SortOrder
    activity?: SortOrder
    frequency?: SortOrder
    deviceId?: SortOrder
  }

  export type TaskAvgOrderByAggregateInput = {
    id?: SortOrder
    frequency?: SortOrder
    deviceId?: SortOrder
  }

  export type TaskMaxOrderByAggregateInput = {
    id?: SortOrder
    activity?: SortOrder
    frequency?: SortOrder
    deviceId?: SortOrder
  }

  export type TaskMinOrderByAggregateInput = {
    id?: SortOrder
    activity?: SortOrder
    frequency?: SortOrder
    deviceId?: SortOrder
  }

  export type TaskSumOrderByAggregateInput = {
    id?: SortOrder
    frequency?: SortOrder
    deviceId?: SortOrder
  }

  export type MonitoringCreateNestedManyWithoutUserInput = {
    create?: XOR<MonitoringCreateWithoutUserInput, MonitoringUncheckedCreateWithoutUserInput> | MonitoringCreateWithoutUserInput[] | MonitoringUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MonitoringCreateOrConnectWithoutUserInput | MonitoringCreateOrConnectWithoutUserInput[]
    createMany?: MonitoringCreateManyUserInputEnvelope
    connect?: MonitoringWhereUniqueInput | MonitoringWhereUniqueInput[]
  }

  export type MonitoringUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<MonitoringCreateWithoutUserInput, MonitoringUncheckedCreateWithoutUserInput> | MonitoringCreateWithoutUserInput[] | MonitoringUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MonitoringCreateOrConnectWithoutUserInput | MonitoringCreateOrConnectWithoutUserInput[]
    createMany?: MonitoringCreateManyUserInputEnvelope
    connect?: MonitoringWhereUniqueInput | MonitoringWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type MonitoringUpdateManyWithoutUserNestedInput = {
    create?: XOR<MonitoringCreateWithoutUserInput, MonitoringUncheckedCreateWithoutUserInput> | MonitoringCreateWithoutUserInput[] | MonitoringUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MonitoringCreateOrConnectWithoutUserInput | MonitoringCreateOrConnectWithoutUserInput[]
    upsert?: MonitoringUpsertWithWhereUniqueWithoutUserInput | MonitoringUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MonitoringCreateManyUserInputEnvelope
    set?: MonitoringWhereUniqueInput | MonitoringWhereUniqueInput[]
    disconnect?: MonitoringWhereUniqueInput | MonitoringWhereUniqueInput[]
    delete?: MonitoringWhereUniqueInput | MonitoringWhereUniqueInput[]
    connect?: MonitoringWhereUniqueInput | MonitoringWhereUniqueInput[]
    update?: MonitoringUpdateWithWhereUniqueWithoutUserInput | MonitoringUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MonitoringUpdateManyWithWhereWithoutUserInput | MonitoringUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MonitoringScalarWhereInput | MonitoringScalarWhereInput[]
  }

  export type MonitoringUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<MonitoringCreateWithoutUserInput, MonitoringUncheckedCreateWithoutUserInput> | MonitoringCreateWithoutUserInput[] | MonitoringUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MonitoringCreateOrConnectWithoutUserInput | MonitoringCreateOrConnectWithoutUserInput[]
    upsert?: MonitoringUpsertWithWhereUniqueWithoutUserInput | MonitoringUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MonitoringCreateManyUserInputEnvelope
    set?: MonitoringWhereUniqueInput | MonitoringWhereUniqueInput[]
    disconnect?: MonitoringWhereUniqueInput | MonitoringWhereUniqueInput[]
    delete?: MonitoringWhereUniqueInput | MonitoringWhereUniqueInput[]
    connect?: MonitoringWhereUniqueInput | MonitoringWhereUniqueInput[]
    update?: MonitoringUpdateWithWhereUniqueWithoutUserInput | MonitoringUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MonitoringUpdateManyWithWhereWithoutUserInput | MonitoringUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MonitoringScalarWhereInput | MonitoringScalarWhereInput[]
  }

  export type MonitoringCreateNestedManyWithoutDeviceInput = {
    create?: XOR<MonitoringCreateWithoutDeviceInput, MonitoringUncheckedCreateWithoutDeviceInput> | MonitoringCreateWithoutDeviceInput[] | MonitoringUncheckedCreateWithoutDeviceInput[]
    connectOrCreate?: MonitoringCreateOrConnectWithoutDeviceInput | MonitoringCreateOrConnectWithoutDeviceInput[]
    createMany?: MonitoringCreateManyDeviceInputEnvelope
    connect?: MonitoringWhereUniqueInput | MonitoringWhereUniqueInput[]
  }

  export type TaskCreateNestedManyWithoutDeviceInput = {
    create?: XOR<TaskCreateWithoutDeviceInput, TaskUncheckedCreateWithoutDeviceInput> | TaskCreateWithoutDeviceInput[] | TaskUncheckedCreateWithoutDeviceInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutDeviceInput | TaskCreateOrConnectWithoutDeviceInput[]
    createMany?: TaskCreateManyDeviceInputEnvelope
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
  }

  export type MonitoringUncheckedCreateNestedManyWithoutDeviceInput = {
    create?: XOR<MonitoringCreateWithoutDeviceInput, MonitoringUncheckedCreateWithoutDeviceInput> | MonitoringCreateWithoutDeviceInput[] | MonitoringUncheckedCreateWithoutDeviceInput[]
    connectOrCreate?: MonitoringCreateOrConnectWithoutDeviceInput | MonitoringCreateOrConnectWithoutDeviceInput[]
    createMany?: MonitoringCreateManyDeviceInputEnvelope
    connect?: MonitoringWhereUniqueInput | MonitoringWhereUniqueInput[]
  }

  export type TaskUncheckedCreateNestedManyWithoutDeviceInput = {
    create?: XOR<TaskCreateWithoutDeviceInput, TaskUncheckedCreateWithoutDeviceInput> | TaskCreateWithoutDeviceInput[] | TaskUncheckedCreateWithoutDeviceInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutDeviceInput | TaskCreateOrConnectWithoutDeviceInput[]
    createMany?: TaskCreateManyDeviceInputEnvelope
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type MonitoringUpdateManyWithoutDeviceNestedInput = {
    create?: XOR<MonitoringCreateWithoutDeviceInput, MonitoringUncheckedCreateWithoutDeviceInput> | MonitoringCreateWithoutDeviceInput[] | MonitoringUncheckedCreateWithoutDeviceInput[]
    connectOrCreate?: MonitoringCreateOrConnectWithoutDeviceInput | MonitoringCreateOrConnectWithoutDeviceInput[]
    upsert?: MonitoringUpsertWithWhereUniqueWithoutDeviceInput | MonitoringUpsertWithWhereUniqueWithoutDeviceInput[]
    createMany?: MonitoringCreateManyDeviceInputEnvelope
    set?: MonitoringWhereUniqueInput | MonitoringWhereUniqueInput[]
    disconnect?: MonitoringWhereUniqueInput | MonitoringWhereUniqueInput[]
    delete?: MonitoringWhereUniqueInput | MonitoringWhereUniqueInput[]
    connect?: MonitoringWhereUniqueInput | MonitoringWhereUniqueInput[]
    update?: MonitoringUpdateWithWhereUniqueWithoutDeviceInput | MonitoringUpdateWithWhereUniqueWithoutDeviceInput[]
    updateMany?: MonitoringUpdateManyWithWhereWithoutDeviceInput | MonitoringUpdateManyWithWhereWithoutDeviceInput[]
    deleteMany?: MonitoringScalarWhereInput | MonitoringScalarWhereInput[]
  }

  export type TaskUpdateManyWithoutDeviceNestedInput = {
    create?: XOR<TaskCreateWithoutDeviceInput, TaskUncheckedCreateWithoutDeviceInput> | TaskCreateWithoutDeviceInput[] | TaskUncheckedCreateWithoutDeviceInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutDeviceInput | TaskCreateOrConnectWithoutDeviceInput[]
    upsert?: TaskUpsertWithWhereUniqueWithoutDeviceInput | TaskUpsertWithWhereUniqueWithoutDeviceInput[]
    createMany?: TaskCreateManyDeviceInputEnvelope
    set?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    disconnect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    delete?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    update?: TaskUpdateWithWhereUniqueWithoutDeviceInput | TaskUpdateWithWhereUniqueWithoutDeviceInput[]
    updateMany?: TaskUpdateManyWithWhereWithoutDeviceInput | TaskUpdateManyWithWhereWithoutDeviceInput[]
    deleteMany?: TaskScalarWhereInput | TaskScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type MonitoringUncheckedUpdateManyWithoutDeviceNestedInput = {
    create?: XOR<MonitoringCreateWithoutDeviceInput, MonitoringUncheckedCreateWithoutDeviceInput> | MonitoringCreateWithoutDeviceInput[] | MonitoringUncheckedCreateWithoutDeviceInput[]
    connectOrCreate?: MonitoringCreateOrConnectWithoutDeviceInput | MonitoringCreateOrConnectWithoutDeviceInput[]
    upsert?: MonitoringUpsertWithWhereUniqueWithoutDeviceInput | MonitoringUpsertWithWhereUniqueWithoutDeviceInput[]
    createMany?: MonitoringCreateManyDeviceInputEnvelope
    set?: MonitoringWhereUniqueInput | MonitoringWhereUniqueInput[]
    disconnect?: MonitoringWhereUniqueInput | MonitoringWhereUniqueInput[]
    delete?: MonitoringWhereUniqueInput | MonitoringWhereUniqueInput[]
    connect?: MonitoringWhereUniqueInput | MonitoringWhereUniqueInput[]
    update?: MonitoringUpdateWithWhereUniqueWithoutDeviceInput | MonitoringUpdateWithWhereUniqueWithoutDeviceInput[]
    updateMany?: MonitoringUpdateManyWithWhereWithoutDeviceInput | MonitoringUpdateManyWithWhereWithoutDeviceInput[]
    deleteMany?: MonitoringScalarWhereInput | MonitoringScalarWhereInput[]
  }

  export type TaskUncheckedUpdateManyWithoutDeviceNestedInput = {
    create?: XOR<TaskCreateWithoutDeviceInput, TaskUncheckedCreateWithoutDeviceInput> | TaskCreateWithoutDeviceInput[] | TaskUncheckedCreateWithoutDeviceInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutDeviceInput | TaskCreateOrConnectWithoutDeviceInput[]
    upsert?: TaskUpsertWithWhereUniqueWithoutDeviceInput | TaskUpsertWithWhereUniqueWithoutDeviceInput[]
    createMany?: TaskCreateManyDeviceInputEnvelope
    set?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    disconnect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    delete?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    update?: TaskUpdateWithWhereUniqueWithoutDeviceInput | TaskUpdateWithWhereUniqueWithoutDeviceInput[]
    updateMany?: TaskUpdateManyWithWhereWithoutDeviceInput | TaskUpdateManyWithWhereWithoutDeviceInput[]
    deleteMany?: TaskScalarWhereInput | TaskScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutMonitoringsInput = {
    create?: XOR<UserCreateWithoutMonitoringsInput, UserUncheckedCreateWithoutMonitoringsInput>
    connectOrCreate?: UserCreateOrConnectWithoutMonitoringsInput
    connect?: UserWhereUniqueInput
  }

  export type DeviceCreateNestedOneWithoutMonitoringsInput = {
    create?: XOR<DeviceCreateWithoutMonitoringsInput, DeviceUncheckedCreateWithoutMonitoringsInput>
    connectOrCreate?: DeviceCreateOrConnectWithoutMonitoringsInput
    connect?: DeviceWhereUniqueInput
  }

  export type CheckedTaskCreateNestedManyWithoutMonitoringInput = {
    create?: XOR<CheckedTaskCreateWithoutMonitoringInput, CheckedTaskUncheckedCreateWithoutMonitoringInput> | CheckedTaskCreateWithoutMonitoringInput[] | CheckedTaskUncheckedCreateWithoutMonitoringInput[]
    connectOrCreate?: CheckedTaskCreateOrConnectWithoutMonitoringInput | CheckedTaskCreateOrConnectWithoutMonitoringInput[]
    createMany?: CheckedTaskCreateManyMonitoringInputEnvelope
    connect?: CheckedTaskWhereUniqueInput | CheckedTaskWhereUniqueInput[]
  }

  export type CheckedTaskUncheckedCreateNestedManyWithoutMonitoringInput = {
    create?: XOR<CheckedTaskCreateWithoutMonitoringInput, CheckedTaskUncheckedCreateWithoutMonitoringInput> | CheckedTaskCreateWithoutMonitoringInput[] | CheckedTaskUncheckedCreateWithoutMonitoringInput[]
    connectOrCreate?: CheckedTaskCreateOrConnectWithoutMonitoringInput | CheckedTaskCreateOrConnectWithoutMonitoringInput[]
    createMany?: CheckedTaskCreateManyMonitoringInputEnvelope
    connect?: CheckedTaskWhereUniqueInput | CheckedTaskWhereUniqueInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UserUpdateOneRequiredWithoutMonitoringsNestedInput = {
    create?: XOR<UserCreateWithoutMonitoringsInput, UserUncheckedCreateWithoutMonitoringsInput>
    connectOrCreate?: UserCreateOrConnectWithoutMonitoringsInput
    upsert?: UserUpsertWithoutMonitoringsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMonitoringsInput, UserUpdateWithoutMonitoringsInput>, UserUncheckedUpdateWithoutMonitoringsInput>
  }

  export type DeviceUpdateOneRequiredWithoutMonitoringsNestedInput = {
    create?: XOR<DeviceCreateWithoutMonitoringsInput, DeviceUncheckedCreateWithoutMonitoringsInput>
    connectOrCreate?: DeviceCreateOrConnectWithoutMonitoringsInput
    upsert?: DeviceUpsertWithoutMonitoringsInput
    connect?: DeviceWhereUniqueInput
    update?: XOR<XOR<DeviceUpdateToOneWithWhereWithoutMonitoringsInput, DeviceUpdateWithoutMonitoringsInput>, DeviceUncheckedUpdateWithoutMonitoringsInput>
  }

  export type CheckedTaskUpdateManyWithoutMonitoringNestedInput = {
    create?: XOR<CheckedTaskCreateWithoutMonitoringInput, CheckedTaskUncheckedCreateWithoutMonitoringInput> | CheckedTaskCreateWithoutMonitoringInput[] | CheckedTaskUncheckedCreateWithoutMonitoringInput[]
    connectOrCreate?: CheckedTaskCreateOrConnectWithoutMonitoringInput | CheckedTaskCreateOrConnectWithoutMonitoringInput[]
    upsert?: CheckedTaskUpsertWithWhereUniqueWithoutMonitoringInput | CheckedTaskUpsertWithWhereUniqueWithoutMonitoringInput[]
    createMany?: CheckedTaskCreateManyMonitoringInputEnvelope
    set?: CheckedTaskWhereUniqueInput | CheckedTaskWhereUniqueInput[]
    disconnect?: CheckedTaskWhereUniqueInput | CheckedTaskWhereUniqueInput[]
    delete?: CheckedTaskWhereUniqueInput | CheckedTaskWhereUniqueInput[]
    connect?: CheckedTaskWhereUniqueInput | CheckedTaskWhereUniqueInput[]
    update?: CheckedTaskUpdateWithWhereUniqueWithoutMonitoringInput | CheckedTaskUpdateWithWhereUniqueWithoutMonitoringInput[]
    updateMany?: CheckedTaskUpdateManyWithWhereWithoutMonitoringInput | CheckedTaskUpdateManyWithWhereWithoutMonitoringInput[]
    deleteMany?: CheckedTaskScalarWhereInput | CheckedTaskScalarWhereInput[]
  }

  export type CheckedTaskUncheckedUpdateManyWithoutMonitoringNestedInput = {
    create?: XOR<CheckedTaskCreateWithoutMonitoringInput, CheckedTaskUncheckedCreateWithoutMonitoringInput> | CheckedTaskCreateWithoutMonitoringInput[] | CheckedTaskUncheckedCreateWithoutMonitoringInput[]
    connectOrCreate?: CheckedTaskCreateOrConnectWithoutMonitoringInput | CheckedTaskCreateOrConnectWithoutMonitoringInput[]
    upsert?: CheckedTaskUpsertWithWhereUniqueWithoutMonitoringInput | CheckedTaskUpsertWithWhereUniqueWithoutMonitoringInput[]
    createMany?: CheckedTaskCreateManyMonitoringInputEnvelope
    set?: CheckedTaskWhereUniqueInput | CheckedTaskWhereUniqueInput[]
    disconnect?: CheckedTaskWhereUniqueInput | CheckedTaskWhereUniqueInput[]
    delete?: CheckedTaskWhereUniqueInput | CheckedTaskWhereUniqueInput[]
    connect?: CheckedTaskWhereUniqueInput | CheckedTaskWhereUniqueInput[]
    update?: CheckedTaskUpdateWithWhereUniqueWithoutMonitoringInput | CheckedTaskUpdateWithWhereUniqueWithoutMonitoringInput[]
    updateMany?: CheckedTaskUpdateManyWithWhereWithoutMonitoringInput | CheckedTaskUpdateManyWithWhereWithoutMonitoringInput[]
    deleteMany?: CheckedTaskScalarWhereInput | CheckedTaskScalarWhereInput[]
  }

  export type TaskCreateNestedOneWithoutCheckedTasksInput = {
    create?: XOR<TaskCreateWithoutCheckedTasksInput, TaskUncheckedCreateWithoutCheckedTasksInput>
    connectOrCreate?: TaskCreateOrConnectWithoutCheckedTasksInput
    connect?: TaskWhereUniqueInput
  }

  export type MonitoringCreateNestedOneWithoutCheckedTasksInput = {
    create?: XOR<MonitoringCreateWithoutCheckedTasksInput, MonitoringUncheckedCreateWithoutCheckedTasksInput>
    connectOrCreate?: MonitoringCreateOrConnectWithoutCheckedTasksInput
    connect?: MonitoringWhereUniqueInput
  }

  export type TaskUpdateOneRequiredWithoutCheckedTasksNestedInput = {
    create?: XOR<TaskCreateWithoutCheckedTasksInput, TaskUncheckedCreateWithoutCheckedTasksInput>
    connectOrCreate?: TaskCreateOrConnectWithoutCheckedTasksInput
    upsert?: TaskUpsertWithoutCheckedTasksInput
    connect?: TaskWhereUniqueInput
    update?: XOR<XOR<TaskUpdateToOneWithWhereWithoutCheckedTasksInput, TaskUpdateWithoutCheckedTasksInput>, TaskUncheckedUpdateWithoutCheckedTasksInput>
  }

  export type MonitoringUpdateOneRequiredWithoutCheckedTasksNestedInput = {
    create?: XOR<MonitoringCreateWithoutCheckedTasksInput, MonitoringUncheckedCreateWithoutCheckedTasksInput>
    connectOrCreate?: MonitoringCreateOrConnectWithoutCheckedTasksInput
    upsert?: MonitoringUpsertWithoutCheckedTasksInput
    connect?: MonitoringWhereUniqueInput
    update?: XOR<XOR<MonitoringUpdateToOneWithWhereWithoutCheckedTasksInput, MonitoringUpdateWithoutCheckedTasksInput>, MonitoringUncheckedUpdateWithoutCheckedTasksInput>
  }

  export type DeviceCreateNestedOneWithoutTaskInput = {
    create?: XOR<DeviceCreateWithoutTaskInput, DeviceUncheckedCreateWithoutTaskInput>
    connectOrCreate?: DeviceCreateOrConnectWithoutTaskInput
    connect?: DeviceWhereUniqueInput
  }

  export type CheckedTaskCreateNestedManyWithoutTaskInput = {
    create?: XOR<CheckedTaskCreateWithoutTaskInput, CheckedTaskUncheckedCreateWithoutTaskInput> | CheckedTaskCreateWithoutTaskInput[] | CheckedTaskUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: CheckedTaskCreateOrConnectWithoutTaskInput | CheckedTaskCreateOrConnectWithoutTaskInput[]
    createMany?: CheckedTaskCreateManyTaskInputEnvelope
    connect?: CheckedTaskWhereUniqueInput | CheckedTaskWhereUniqueInput[]
  }

  export type CheckedTaskUncheckedCreateNestedManyWithoutTaskInput = {
    create?: XOR<CheckedTaskCreateWithoutTaskInput, CheckedTaskUncheckedCreateWithoutTaskInput> | CheckedTaskCreateWithoutTaskInput[] | CheckedTaskUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: CheckedTaskCreateOrConnectWithoutTaskInput | CheckedTaskCreateOrConnectWithoutTaskInput[]
    createMany?: CheckedTaskCreateManyTaskInputEnvelope
    connect?: CheckedTaskWhereUniqueInput | CheckedTaskWhereUniqueInput[]
  }

  export type DeviceUpdateOneRequiredWithoutTaskNestedInput = {
    create?: XOR<DeviceCreateWithoutTaskInput, DeviceUncheckedCreateWithoutTaskInput>
    connectOrCreate?: DeviceCreateOrConnectWithoutTaskInput
    upsert?: DeviceUpsertWithoutTaskInput
    connect?: DeviceWhereUniqueInput
    update?: XOR<XOR<DeviceUpdateToOneWithWhereWithoutTaskInput, DeviceUpdateWithoutTaskInput>, DeviceUncheckedUpdateWithoutTaskInput>
  }

  export type CheckedTaskUpdateManyWithoutTaskNestedInput = {
    create?: XOR<CheckedTaskCreateWithoutTaskInput, CheckedTaskUncheckedCreateWithoutTaskInput> | CheckedTaskCreateWithoutTaskInput[] | CheckedTaskUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: CheckedTaskCreateOrConnectWithoutTaskInput | CheckedTaskCreateOrConnectWithoutTaskInput[]
    upsert?: CheckedTaskUpsertWithWhereUniqueWithoutTaskInput | CheckedTaskUpsertWithWhereUniqueWithoutTaskInput[]
    createMany?: CheckedTaskCreateManyTaskInputEnvelope
    set?: CheckedTaskWhereUniqueInput | CheckedTaskWhereUniqueInput[]
    disconnect?: CheckedTaskWhereUniqueInput | CheckedTaskWhereUniqueInput[]
    delete?: CheckedTaskWhereUniqueInput | CheckedTaskWhereUniqueInput[]
    connect?: CheckedTaskWhereUniqueInput | CheckedTaskWhereUniqueInput[]
    update?: CheckedTaskUpdateWithWhereUniqueWithoutTaskInput | CheckedTaskUpdateWithWhereUniqueWithoutTaskInput[]
    updateMany?: CheckedTaskUpdateManyWithWhereWithoutTaskInput | CheckedTaskUpdateManyWithWhereWithoutTaskInput[]
    deleteMany?: CheckedTaskScalarWhereInput | CheckedTaskScalarWhereInput[]
  }

  export type CheckedTaskUncheckedUpdateManyWithoutTaskNestedInput = {
    create?: XOR<CheckedTaskCreateWithoutTaskInput, CheckedTaskUncheckedCreateWithoutTaskInput> | CheckedTaskCreateWithoutTaskInput[] | CheckedTaskUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: CheckedTaskCreateOrConnectWithoutTaskInput | CheckedTaskCreateOrConnectWithoutTaskInput[]
    upsert?: CheckedTaskUpsertWithWhereUniqueWithoutTaskInput | CheckedTaskUpsertWithWhereUniqueWithoutTaskInput[]
    createMany?: CheckedTaskCreateManyTaskInputEnvelope
    set?: CheckedTaskWhereUniqueInput | CheckedTaskWhereUniqueInput[]
    disconnect?: CheckedTaskWhereUniqueInput | CheckedTaskWhereUniqueInput[]
    delete?: CheckedTaskWhereUniqueInput | CheckedTaskWhereUniqueInput[]
    connect?: CheckedTaskWhereUniqueInput | CheckedTaskWhereUniqueInput[]
    update?: CheckedTaskUpdateWithWhereUniqueWithoutTaskInput | CheckedTaskUpdateWithWhereUniqueWithoutTaskInput[]
    updateMany?: CheckedTaskUpdateManyWithWhereWithoutTaskInput | CheckedTaskUpdateManyWithWhereWithoutTaskInput[]
    deleteMany?: CheckedTaskScalarWhereInput | CheckedTaskScalarWhereInput[]
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type MonitoringCreateWithoutUserInput = {
    Tester: string
    Date: Date | string
    MonitoringType: number
    Documentation: string
    Status: boolean
    Sumary: string
    Signature: string
    device: DeviceCreateNestedOneWithoutMonitoringsInput
    checkedTasks?: CheckedTaskCreateNestedManyWithoutMonitoringInput
  }

  export type MonitoringUncheckedCreateWithoutUserInput = {
    id?: number
    Tester: string
    Date: Date | string
    MonitoringType: number
    Documentation: string
    Status: boolean
    Sumary: string
    Signature: string
    deviceId: number
    checkedTasks?: CheckedTaskUncheckedCreateNestedManyWithoutMonitoringInput
  }

  export type MonitoringCreateOrConnectWithoutUserInput = {
    where: MonitoringWhereUniqueInput
    create: XOR<MonitoringCreateWithoutUserInput, MonitoringUncheckedCreateWithoutUserInput>
  }

  export type MonitoringCreateManyUserInputEnvelope = {
    data: MonitoringCreateManyUserInput | MonitoringCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type MonitoringUpsertWithWhereUniqueWithoutUserInput = {
    where: MonitoringWhereUniqueInput
    update: XOR<MonitoringUpdateWithoutUserInput, MonitoringUncheckedUpdateWithoutUserInput>
    create: XOR<MonitoringCreateWithoutUserInput, MonitoringUncheckedCreateWithoutUserInput>
  }

  export type MonitoringUpdateWithWhereUniqueWithoutUserInput = {
    where: MonitoringWhereUniqueInput
    data: XOR<MonitoringUpdateWithoutUserInput, MonitoringUncheckedUpdateWithoutUserInput>
  }

  export type MonitoringUpdateManyWithWhereWithoutUserInput = {
    where: MonitoringScalarWhereInput
    data: XOR<MonitoringUpdateManyMutationInput, MonitoringUncheckedUpdateManyWithoutUserInput>
  }

  export type MonitoringScalarWhereInput = {
    AND?: MonitoringScalarWhereInput | MonitoringScalarWhereInput[]
    OR?: MonitoringScalarWhereInput[]
    NOT?: MonitoringScalarWhereInput | MonitoringScalarWhereInput[]
    id?: IntFilter<"Monitoring"> | number
    Tester?: StringFilter<"Monitoring"> | string
    Date?: DateTimeFilter<"Monitoring"> | Date | string
    MonitoringType?: IntFilter<"Monitoring"> | number
    Documentation?: StringFilter<"Monitoring"> | string
    Status?: BoolFilter<"Monitoring"> | boolean
    Sumary?: StringFilter<"Monitoring"> | string
    Signature?: StringFilter<"Monitoring"> | string
    userId?: StringFilter<"Monitoring"> | string
    deviceId?: IntFilter<"Monitoring"> | number
  }

  export type MonitoringCreateWithoutDeviceInput = {
    Tester: string
    Date: Date | string
    MonitoringType: number
    Documentation: string
    Status: boolean
    Sumary: string
    Signature: string
    user: UserCreateNestedOneWithoutMonitoringsInput
    checkedTasks?: CheckedTaskCreateNestedManyWithoutMonitoringInput
  }

  export type MonitoringUncheckedCreateWithoutDeviceInput = {
    id?: number
    Tester: string
    Date: Date | string
    MonitoringType: number
    Documentation: string
    Status: boolean
    Sumary: string
    Signature: string
    userId: string
    checkedTasks?: CheckedTaskUncheckedCreateNestedManyWithoutMonitoringInput
  }

  export type MonitoringCreateOrConnectWithoutDeviceInput = {
    where: MonitoringWhereUniqueInput
    create: XOR<MonitoringCreateWithoutDeviceInput, MonitoringUncheckedCreateWithoutDeviceInput>
  }

  export type MonitoringCreateManyDeviceInputEnvelope = {
    data: MonitoringCreateManyDeviceInput | MonitoringCreateManyDeviceInput[]
    skipDuplicates?: boolean
  }

  export type TaskCreateWithoutDeviceInput = {
    activity: string
    frequency: number
    checkedTasks?: CheckedTaskCreateNestedManyWithoutTaskInput
  }

  export type TaskUncheckedCreateWithoutDeviceInput = {
    id?: number
    activity: string
    frequency: number
    checkedTasks?: CheckedTaskUncheckedCreateNestedManyWithoutTaskInput
  }

  export type TaskCreateOrConnectWithoutDeviceInput = {
    where: TaskWhereUniqueInput
    create: XOR<TaskCreateWithoutDeviceInput, TaskUncheckedCreateWithoutDeviceInput>
  }

  export type TaskCreateManyDeviceInputEnvelope = {
    data: TaskCreateManyDeviceInput | TaskCreateManyDeviceInput[]
    skipDuplicates?: boolean
  }

  export type MonitoringUpsertWithWhereUniqueWithoutDeviceInput = {
    where: MonitoringWhereUniqueInput
    update: XOR<MonitoringUpdateWithoutDeviceInput, MonitoringUncheckedUpdateWithoutDeviceInput>
    create: XOR<MonitoringCreateWithoutDeviceInput, MonitoringUncheckedCreateWithoutDeviceInput>
  }

  export type MonitoringUpdateWithWhereUniqueWithoutDeviceInput = {
    where: MonitoringWhereUniqueInput
    data: XOR<MonitoringUpdateWithoutDeviceInput, MonitoringUncheckedUpdateWithoutDeviceInput>
  }

  export type MonitoringUpdateManyWithWhereWithoutDeviceInput = {
    where: MonitoringScalarWhereInput
    data: XOR<MonitoringUpdateManyMutationInput, MonitoringUncheckedUpdateManyWithoutDeviceInput>
  }

  export type TaskUpsertWithWhereUniqueWithoutDeviceInput = {
    where: TaskWhereUniqueInput
    update: XOR<TaskUpdateWithoutDeviceInput, TaskUncheckedUpdateWithoutDeviceInput>
    create: XOR<TaskCreateWithoutDeviceInput, TaskUncheckedCreateWithoutDeviceInput>
  }

  export type TaskUpdateWithWhereUniqueWithoutDeviceInput = {
    where: TaskWhereUniqueInput
    data: XOR<TaskUpdateWithoutDeviceInput, TaskUncheckedUpdateWithoutDeviceInput>
  }

  export type TaskUpdateManyWithWhereWithoutDeviceInput = {
    where: TaskScalarWhereInput
    data: XOR<TaskUpdateManyMutationInput, TaskUncheckedUpdateManyWithoutDeviceInput>
  }

  export type TaskScalarWhereInput = {
    AND?: TaskScalarWhereInput | TaskScalarWhereInput[]
    OR?: TaskScalarWhereInput[]
    NOT?: TaskScalarWhereInput | TaskScalarWhereInput[]
    id?: IntFilter<"Task"> | number
    activity?: StringFilter<"Task"> | string
    frequency?: IntFilter<"Task"> | number
    deviceId?: IntFilter<"Task"> | number
  }

  export type UserCreateWithoutMonitoringsInput = {
    id?: string
    username: string
    email: string
    password: string
    image?: string | null
  }

  export type UserUncheckedCreateWithoutMonitoringsInput = {
    id?: string
    username: string
    email: string
    password: string
    image?: string | null
  }

  export type UserCreateOrConnectWithoutMonitoringsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMonitoringsInput, UserUncheckedCreateWithoutMonitoringsInput>
  }

  export type DeviceCreateWithoutMonitoringsInput = {
    devicename: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Task?: TaskCreateNestedManyWithoutDeviceInput
  }

  export type DeviceUncheckedCreateWithoutMonitoringsInput = {
    id?: number
    devicename: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Task?: TaskUncheckedCreateNestedManyWithoutDeviceInput
  }

  export type DeviceCreateOrConnectWithoutMonitoringsInput = {
    where: DeviceWhereUniqueInput
    create: XOR<DeviceCreateWithoutMonitoringsInput, DeviceUncheckedCreateWithoutMonitoringsInput>
  }

  export type CheckedTaskCreateWithoutMonitoringInput = {
    checked: boolean
    task: TaskCreateNestedOneWithoutCheckedTasksInput
  }

  export type CheckedTaskUncheckedCreateWithoutMonitoringInput = {
    id?: number
    taskId: number
    checked: boolean
  }

  export type CheckedTaskCreateOrConnectWithoutMonitoringInput = {
    where: CheckedTaskWhereUniqueInput
    create: XOR<CheckedTaskCreateWithoutMonitoringInput, CheckedTaskUncheckedCreateWithoutMonitoringInput>
  }

  export type CheckedTaskCreateManyMonitoringInputEnvelope = {
    data: CheckedTaskCreateManyMonitoringInput | CheckedTaskCreateManyMonitoringInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutMonitoringsInput = {
    update: XOR<UserUpdateWithoutMonitoringsInput, UserUncheckedUpdateWithoutMonitoringsInput>
    create: XOR<UserCreateWithoutMonitoringsInput, UserUncheckedCreateWithoutMonitoringsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMonitoringsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMonitoringsInput, UserUncheckedUpdateWithoutMonitoringsInput>
  }

  export type UserUpdateWithoutMonitoringsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateWithoutMonitoringsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DeviceUpsertWithoutMonitoringsInput = {
    update: XOR<DeviceUpdateWithoutMonitoringsInput, DeviceUncheckedUpdateWithoutMonitoringsInput>
    create: XOR<DeviceCreateWithoutMonitoringsInput, DeviceUncheckedCreateWithoutMonitoringsInput>
    where?: DeviceWhereInput
  }

  export type DeviceUpdateToOneWithWhereWithoutMonitoringsInput = {
    where?: DeviceWhereInput
    data: XOR<DeviceUpdateWithoutMonitoringsInput, DeviceUncheckedUpdateWithoutMonitoringsInput>
  }

  export type DeviceUpdateWithoutMonitoringsInput = {
    devicename?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Task?: TaskUpdateManyWithoutDeviceNestedInput
  }

  export type DeviceUncheckedUpdateWithoutMonitoringsInput = {
    id?: IntFieldUpdateOperationsInput | number
    devicename?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Task?: TaskUncheckedUpdateManyWithoutDeviceNestedInput
  }

  export type CheckedTaskUpsertWithWhereUniqueWithoutMonitoringInput = {
    where: CheckedTaskWhereUniqueInput
    update: XOR<CheckedTaskUpdateWithoutMonitoringInput, CheckedTaskUncheckedUpdateWithoutMonitoringInput>
    create: XOR<CheckedTaskCreateWithoutMonitoringInput, CheckedTaskUncheckedCreateWithoutMonitoringInput>
  }

  export type CheckedTaskUpdateWithWhereUniqueWithoutMonitoringInput = {
    where: CheckedTaskWhereUniqueInput
    data: XOR<CheckedTaskUpdateWithoutMonitoringInput, CheckedTaskUncheckedUpdateWithoutMonitoringInput>
  }

  export type CheckedTaskUpdateManyWithWhereWithoutMonitoringInput = {
    where: CheckedTaskScalarWhereInput
    data: XOR<CheckedTaskUpdateManyMutationInput, CheckedTaskUncheckedUpdateManyWithoutMonitoringInput>
  }

  export type CheckedTaskScalarWhereInput = {
    AND?: CheckedTaskScalarWhereInput | CheckedTaskScalarWhereInput[]
    OR?: CheckedTaskScalarWhereInput[]
    NOT?: CheckedTaskScalarWhereInput | CheckedTaskScalarWhereInput[]
    id?: IntFilter<"CheckedTask"> | number
    taskId?: IntFilter<"CheckedTask"> | number
    monitoringId?: IntFilter<"CheckedTask"> | number
    checked?: BoolFilter<"CheckedTask"> | boolean
  }

  export type TaskCreateWithoutCheckedTasksInput = {
    activity: string
    frequency: number
    device: DeviceCreateNestedOneWithoutTaskInput
  }

  export type TaskUncheckedCreateWithoutCheckedTasksInput = {
    id?: number
    activity: string
    frequency: number
    deviceId: number
  }

  export type TaskCreateOrConnectWithoutCheckedTasksInput = {
    where: TaskWhereUniqueInput
    create: XOR<TaskCreateWithoutCheckedTasksInput, TaskUncheckedCreateWithoutCheckedTasksInput>
  }

  export type MonitoringCreateWithoutCheckedTasksInput = {
    Tester: string
    Date: Date | string
    MonitoringType: number
    Documentation: string
    Status: boolean
    Sumary: string
    Signature: string
    user: UserCreateNestedOneWithoutMonitoringsInput
    device: DeviceCreateNestedOneWithoutMonitoringsInput
  }

  export type MonitoringUncheckedCreateWithoutCheckedTasksInput = {
    id?: number
    Tester: string
    Date: Date | string
    MonitoringType: number
    Documentation: string
    Status: boolean
    Sumary: string
    Signature: string
    userId: string
    deviceId: number
  }

  export type MonitoringCreateOrConnectWithoutCheckedTasksInput = {
    where: MonitoringWhereUniqueInput
    create: XOR<MonitoringCreateWithoutCheckedTasksInput, MonitoringUncheckedCreateWithoutCheckedTasksInput>
  }

  export type TaskUpsertWithoutCheckedTasksInput = {
    update: XOR<TaskUpdateWithoutCheckedTasksInput, TaskUncheckedUpdateWithoutCheckedTasksInput>
    create: XOR<TaskCreateWithoutCheckedTasksInput, TaskUncheckedCreateWithoutCheckedTasksInput>
    where?: TaskWhereInput
  }

  export type TaskUpdateToOneWithWhereWithoutCheckedTasksInput = {
    where?: TaskWhereInput
    data: XOR<TaskUpdateWithoutCheckedTasksInput, TaskUncheckedUpdateWithoutCheckedTasksInput>
  }

  export type TaskUpdateWithoutCheckedTasksInput = {
    activity?: StringFieldUpdateOperationsInput | string
    frequency?: IntFieldUpdateOperationsInput | number
    device?: DeviceUpdateOneRequiredWithoutTaskNestedInput
  }

  export type TaskUncheckedUpdateWithoutCheckedTasksInput = {
    id?: IntFieldUpdateOperationsInput | number
    activity?: StringFieldUpdateOperationsInput | string
    frequency?: IntFieldUpdateOperationsInput | number
    deviceId?: IntFieldUpdateOperationsInput | number
  }

  export type MonitoringUpsertWithoutCheckedTasksInput = {
    update: XOR<MonitoringUpdateWithoutCheckedTasksInput, MonitoringUncheckedUpdateWithoutCheckedTasksInput>
    create: XOR<MonitoringCreateWithoutCheckedTasksInput, MonitoringUncheckedCreateWithoutCheckedTasksInput>
    where?: MonitoringWhereInput
  }

  export type MonitoringUpdateToOneWithWhereWithoutCheckedTasksInput = {
    where?: MonitoringWhereInput
    data: XOR<MonitoringUpdateWithoutCheckedTasksInput, MonitoringUncheckedUpdateWithoutCheckedTasksInput>
  }

  export type MonitoringUpdateWithoutCheckedTasksInput = {
    Tester?: StringFieldUpdateOperationsInput | string
    Date?: DateTimeFieldUpdateOperationsInput | Date | string
    MonitoringType?: IntFieldUpdateOperationsInput | number
    Documentation?: StringFieldUpdateOperationsInput | string
    Status?: BoolFieldUpdateOperationsInput | boolean
    Sumary?: StringFieldUpdateOperationsInput | string
    Signature?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutMonitoringsNestedInput
    device?: DeviceUpdateOneRequiredWithoutMonitoringsNestedInput
  }

  export type MonitoringUncheckedUpdateWithoutCheckedTasksInput = {
    id?: IntFieldUpdateOperationsInput | number
    Tester?: StringFieldUpdateOperationsInput | string
    Date?: DateTimeFieldUpdateOperationsInput | Date | string
    MonitoringType?: IntFieldUpdateOperationsInput | number
    Documentation?: StringFieldUpdateOperationsInput | string
    Status?: BoolFieldUpdateOperationsInput | boolean
    Sumary?: StringFieldUpdateOperationsInput | string
    Signature?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    deviceId?: IntFieldUpdateOperationsInput | number
  }

  export type DeviceCreateWithoutTaskInput = {
    devicename: string
    createdAt?: Date | string
    updatedAt?: Date | string
    monitorings?: MonitoringCreateNestedManyWithoutDeviceInput
  }

  export type DeviceUncheckedCreateWithoutTaskInput = {
    id?: number
    devicename: string
    createdAt?: Date | string
    updatedAt?: Date | string
    monitorings?: MonitoringUncheckedCreateNestedManyWithoutDeviceInput
  }

  export type DeviceCreateOrConnectWithoutTaskInput = {
    where: DeviceWhereUniqueInput
    create: XOR<DeviceCreateWithoutTaskInput, DeviceUncheckedCreateWithoutTaskInput>
  }

  export type CheckedTaskCreateWithoutTaskInput = {
    checked: boolean
    monitoring: MonitoringCreateNestedOneWithoutCheckedTasksInput
  }

  export type CheckedTaskUncheckedCreateWithoutTaskInput = {
    id?: number
    monitoringId: number
    checked: boolean
  }

  export type CheckedTaskCreateOrConnectWithoutTaskInput = {
    where: CheckedTaskWhereUniqueInput
    create: XOR<CheckedTaskCreateWithoutTaskInput, CheckedTaskUncheckedCreateWithoutTaskInput>
  }

  export type CheckedTaskCreateManyTaskInputEnvelope = {
    data: CheckedTaskCreateManyTaskInput | CheckedTaskCreateManyTaskInput[]
    skipDuplicates?: boolean
  }

  export type DeviceUpsertWithoutTaskInput = {
    update: XOR<DeviceUpdateWithoutTaskInput, DeviceUncheckedUpdateWithoutTaskInput>
    create: XOR<DeviceCreateWithoutTaskInput, DeviceUncheckedCreateWithoutTaskInput>
    where?: DeviceWhereInput
  }

  export type DeviceUpdateToOneWithWhereWithoutTaskInput = {
    where?: DeviceWhereInput
    data: XOR<DeviceUpdateWithoutTaskInput, DeviceUncheckedUpdateWithoutTaskInput>
  }

  export type DeviceUpdateWithoutTaskInput = {
    devicename?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    monitorings?: MonitoringUpdateManyWithoutDeviceNestedInput
  }

  export type DeviceUncheckedUpdateWithoutTaskInput = {
    id?: IntFieldUpdateOperationsInput | number
    devicename?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    monitorings?: MonitoringUncheckedUpdateManyWithoutDeviceNestedInput
  }

  export type CheckedTaskUpsertWithWhereUniqueWithoutTaskInput = {
    where: CheckedTaskWhereUniqueInput
    update: XOR<CheckedTaskUpdateWithoutTaskInput, CheckedTaskUncheckedUpdateWithoutTaskInput>
    create: XOR<CheckedTaskCreateWithoutTaskInput, CheckedTaskUncheckedCreateWithoutTaskInput>
  }

  export type CheckedTaskUpdateWithWhereUniqueWithoutTaskInput = {
    where: CheckedTaskWhereUniqueInput
    data: XOR<CheckedTaskUpdateWithoutTaskInput, CheckedTaskUncheckedUpdateWithoutTaskInput>
  }

  export type CheckedTaskUpdateManyWithWhereWithoutTaskInput = {
    where: CheckedTaskScalarWhereInput
    data: XOR<CheckedTaskUpdateManyMutationInput, CheckedTaskUncheckedUpdateManyWithoutTaskInput>
  }

  export type MonitoringCreateManyUserInput = {
    id?: number
    Tester: string
    Date: Date | string
    MonitoringType: number
    Documentation: string
    Status: boolean
    Sumary: string
    Signature: string
    deviceId: number
  }

  export type MonitoringUpdateWithoutUserInput = {
    Tester?: StringFieldUpdateOperationsInput | string
    Date?: DateTimeFieldUpdateOperationsInput | Date | string
    MonitoringType?: IntFieldUpdateOperationsInput | number
    Documentation?: StringFieldUpdateOperationsInput | string
    Status?: BoolFieldUpdateOperationsInput | boolean
    Sumary?: StringFieldUpdateOperationsInput | string
    Signature?: StringFieldUpdateOperationsInput | string
    device?: DeviceUpdateOneRequiredWithoutMonitoringsNestedInput
    checkedTasks?: CheckedTaskUpdateManyWithoutMonitoringNestedInput
  }

  export type MonitoringUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    Tester?: StringFieldUpdateOperationsInput | string
    Date?: DateTimeFieldUpdateOperationsInput | Date | string
    MonitoringType?: IntFieldUpdateOperationsInput | number
    Documentation?: StringFieldUpdateOperationsInput | string
    Status?: BoolFieldUpdateOperationsInput | boolean
    Sumary?: StringFieldUpdateOperationsInput | string
    Signature?: StringFieldUpdateOperationsInput | string
    deviceId?: IntFieldUpdateOperationsInput | number
    checkedTasks?: CheckedTaskUncheckedUpdateManyWithoutMonitoringNestedInput
  }

  export type MonitoringUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    Tester?: StringFieldUpdateOperationsInput | string
    Date?: DateTimeFieldUpdateOperationsInput | Date | string
    MonitoringType?: IntFieldUpdateOperationsInput | number
    Documentation?: StringFieldUpdateOperationsInput | string
    Status?: BoolFieldUpdateOperationsInput | boolean
    Sumary?: StringFieldUpdateOperationsInput | string
    Signature?: StringFieldUpdateOperationsInput | string
    deviceId?: IntFieldUpdateOperationsInput | number
  }

  export type MonitoringCreateManyDeviceInput = {
    id?: number
    Tester: string
    Date: Date | string
    MonitoringType: number
    Documentation: string
    Status: boolean
    Sumary: string
    Signature: string
    userId: string
  }

  export type TaskCreateManyDeviceInput = {
    id?: number
    activity: string
    frequency: number
  }

  export type MonitoringUpdateWithoutDeviceInput = {
    Tester?: StringFieldUpdateOperationsInput | string
    Date?: DateTimeFieldUpdateOperationsInput | Date | string
    MonitoringType?: IntFieldUpdateOperationsInput | number
    Documentation?: StringFieldUpdateOperationsInput | string
    Status?: BoolFieldUpdateOperationsInput | boolean
    Sumary?: StringFieldUpdateOperationsInput | string
    Signature?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutMonitoringsNestedInput
    checkedTasks?: CheckedTaskUpdateManyWithoutMonitoringNestedInput
  }

  export type MonitoringUncheckedUpdateWithoutDeviceInput = {
    id?: IntFieldUpdateOperationsInput | number
    Tester?: StringFieldUpdateOperationsInput | string
    Date?: DateTimeFieldUpdateOperationsInput | Date | string
    MonitoringType?: IntFieldUpdateOperationsInput | number
    Documentation?: StringFieldUpdateOperationsInput | string
    Status?: BoolFieldUpdateOperationsInput | boolean
    Sumary?: StringFieldUpdateOperationsInput | string
    Signature?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    checkedTasks?: CheckedTaskUncheckedUpdateManyWithoutMonitoringNestedInput
  }

  export type MonitoringUncheckedUpdateManyWithoutDeviceInput = {
    id?: IntFieldUpdateOperationsInput | number
    Tester?: StringFieldUpdateOperationsInput | string
    Date?: DateTimeFieldUpdateOperationsInput | Date | string
    MonitoringType?: IntFieldUpdateOperationsInput | number
    Documentation?: StringFieldUpdateOperationsInput | string
    Status?: BoolFieldUpdateOperationsInput | boolean
    Sumary?: StringFieldUpdateOperationsInput | string
    Signature?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type TaskUpdateWithoutDeviceInput = {
    activity?: StringFieldUpdateOperationsInput | string
    frequency?: IntFieldUpdateOperationsInput | number
    checkedTasks?: CheckedTaskUpdateManyWithoutTaskNestedInput
  }

  export type TaskUncheckedUpdateWithoutDeviceInput = {
    id?: IntFieldUpdateOperationsInput | number
    activity?: StringFieldUpdateOperationsInput | string
    frequency?: IntFieldUpdateOperationsInput | number
    checkedTasks?: CheckedTaskUncheckedUpdateManyWithoutTaskNestedInput
  }

  export type TaskUncheckedUpdateManyWithoutDeviceInput = {
    id?: IntFieldUpdateOperationsInput | number
    activity?: StringFieldUpdateOperationsInput | string
    frequency?: IntFieldUpdateOperationsInput | number
  }

  export type CheckedTaskCreateManyMonitoringInput = {
    id?: number
    taskId: number
    checked: boolean
  }

  export type CheckedTaskUpdateWithoutMonitoringInput = {
    checked?: BoolFieldUpdateOperationsInput | boolean
    task?: TaskUpdateOneRequiredWithoutCheckedTasksNestedInput
  }

  export type CheckedTaskUncheckedUpdateWithoutMonitoringInput = {
    id?: IntFieldUpdateOperationsInput | number
    taskId?: IntFieldUpdateOperationsInput | number
    checked?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CheckedTaskUncheckedUpdateManyWithoutMonitoringInput = {
    id?: IntFieldUpdateOperationsInput | number
    taskId?: IntFieldUpdateOperationsInput | number
    checked?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CheckedTaskCreateManyTaskInput = {
    id?: number
    monitoringId: number
    checked: boolean
  }

  export type CheckedTaskUpdateWithoutTaskInput = {
    checked?: BoolFieldUpdateOperationsInput | boolean
    monitoring?: MonitoringUpdateOneRequiredWithoutCheckedTasksNestedInput
  }

  export type CheckedTaskUncheckedUpdateWithoutTaskInput = {
    id?: IntFieldUpdateOperationsInput | number
    monitoringId?: IntFieldUpdateOperationsInput | number
    checked?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CheckedTaskUncheckedUpdateManyWithoutTaskInput = {
    id?: IntFieldUpdateOperationsInput | number
    monitoringId?: IntFieldUpdateOperationsInput | number
    checked?: BoolFieldUpdateOperationsInput | boolean
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}